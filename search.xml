<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/posts/hello-hexo.html"/>
      <url>/posts/hello-hexo.html</url>
      
        <content type="html"><![CDATA[<h1 id="我的hexo使用笔记-不定期更新"><a href="#我的hexo使用笔记-不定期更新" class="headerlink" title="我的hexo使用笔记(不定期更新)"></a>我的hexo使用笔记(不定期更新)</h1><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>主题使用了removeif修改后的icarus，之前看到了icarus就很喜欢它的设计，但是总有一些不太尽如人意的地方，自己又没有特别多的时间去一一修改，当看到removeif修改后的icarus(amazing)主题，只感觉到相见恨晚。</p><h2 id="永久链接"><a href="#永久链接" class="headerlink" title="永久链接"></a>永久链接</h2><p>hexo原版的固定链接实在是太长了，我一开始采取的修改措施是改成了:categories/:title/的形式，并使用中文转拼音的插件，但是这样的话如果使用hexo new的时候输入的是中文名，生成的链接往往极其冗长也并不好看，所以我才去了网上的方案，如果输入的是英文名然后修改title为中文的方案虽然可以自定义链接，但是文章多了也不好管理，所以最终我采取了将hexo目录下的_config配置中的permalink改为了 <code>posts/:urlname</code> 的形式，并修改scaffold中的post.md，给模板也加上该字段，之后hexo生成链接时使用的名字就是我们自己写在urlname的值了，然后我们便可以直接在hexo new的时候使用中文了。</p><h2 id="百度收录"><a href="#百度收录" class="headerlink" title="百度收录"></a>百度收录</h2><p>比起谷歌收录，百度收录较为麻烦，我采取了双部署的方式，在coding page上也部署了一份，并且通过dnspod将搜索引擎的访问解析到了coding page上，当前国内大部分网络访问也是解析到coding page上的，感觉会快一些。</p><h2 id="为amazing主题添加widget"><a href="#为amazing主题添加widget" class="headerlink" title="为amazing主题添加widget"></a>为amazing主题添加widget</h2><p>我为该主题添加了一个widget用于显示访客所在的地方,即 revolvermaps.com的统计js。<br>假设该widget命名为global</p><h3 id="首先添加widget的json文件"><a href="#首先添加widget的json文件" class="headerlink" title="首先添加widget的json文件"></a>首先添加widget的json文件</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">nano themes/amazing/include/schema/widget/global.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"$schema"</span>: <span class="string">"http://json-schema.org/draft-07/schema#"</span>,</span><br><span class="line">    <span class="attr">"$id"</span>: <span class="string">"/widget/global.json"</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"Table of contents widget configurations"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">            <span class="attr">"const"</span>: <span class="string">"global"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"required"</span>: [</span><br><span class="line">        <span class="string">"type"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在widget-json里面添加该widget"><a href="#在widget-json里面添加该widget" class="headerlink" title="在widget.json里面添加该widget"></a>在widget.json里面添加该widget</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nano themes/amazing/include/schema/common/widgets.json</span><br><span class="line"><span class="comment">//添加上</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"$ref"</span>: <span class="string">"/widget/global.json"</span></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h3 id="创建该widget的模板文件"><a href="#创建该widget的模板文件" class="headerlink" title="创建该widget的模板文件"></a>创建该widget的模板文件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">nano themes/amazing/layout/widget/global.jsx</span><br><span class="line">const &#123; Component &#125; = require('inferno');</span><br><span class="line">const &#123; cacheComponent &#125; = require('../util/cache');</span><br><span class="line"></span><br><span class="line">class Global extends Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return &lt;div class="card widget"&gt;</span><br><span class="line">            &lt;div class="card-content"&gt;</span><br><span class="line">                &lt;div class="menu"&gt;</span><br><span class="line">                    &lt;h3 class="menu-label"&gt;网站访客&lt;/h3&gt;</span><br><span class="line">&lt;script type="text/javascript" src="//rf.revolvermaps.com/0/0/8.js?i=l&amp;amp;m=0&amp;amp;c=ff0000&amp;amp;cr1=ffffff&amp;amp;f=arial&amp;amp;l=33" async="async"&gt;&lt;/script&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = cacheComponent(Global, 'widget.global', props =&gt; &#123;</span><br><span class="line">    const &#123; helper, widget &#125; = props;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">        buttonTitle: helper.__('widget.global')</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>最后在_config.yml里面加上 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#39;</span><br><span class="line">position: right</span><br><span class="line">type: global</span><br><span class="line">&#39;</span><br></pre></td></tr></table></figure><p>即可</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo使用valine评论并支持邮件通知</title>
      <link href="/posts/valine-admin.html"/>
      <url>/posts/valine-admin.html</url>
      
        <content type="html"><![CDATA[<h2 id="使用valine评论并启用邮件通知"><a href="#使用valine评论并启用邮件通知" class="headerlink" title="使用valine评论并启用邮件通知"></a>使用valine评论并启用邮件通知</h2><p>使用hexo来生成静态页面做博客有很多好处，其中一个非常大的好处就是不需要使用自己的服务器<del>省了一大笔钱</del>。但是正是因为是静态网页也有一些不足的地方，例如评论。hexo的评论只能使用第三方的服务，如gitalk使用了github issues来储存评论，而valine使用了leancloud来部署一个后端并储存评论。之前一直使用的是gitalk，但是不是每个人都有github账号，而本主题的作者removeif正好这些天为主题添加了valine的最新评论支持。为了更加方便大家评论，我也决定尝试一下使用valine作为评论插件。</p><a id="more"></a><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="6612533591"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="部署valine评论"><a href="#部署valine评论" class="headerlink" title="部署valine评论"></a>部署valine评论</h3><p>首先我们要让原版的valine评论正常运行，教程可以查看<a href="https://valine.js.org/quickstart.html。">https://valine.js.org/quickstart.html。</a></p><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/04/0809.png" alt="创建一个应用"></p><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/04/0812.png" alt="获取apikey"></p><p>之后因为主题支持，我只需要填上appid和appkey即可。</p><h3 id="使valine支持评论邮件通知"><a href="#使valine支持评论邮件通知" class="headerlink" title="使valine支持评论邮件通知"></a>使valine支持评论邮件通知</h3><p>原版的valine有个很大的问题，那就是回复了评论之后，之前的评论者无法收到通知…那么评论就失去了意义，因为基本不会有人多次访问一个页面去查看评论是否得到了回复。而<a href="https://github.com/DesertsP/Valine-Admin">valine-admin</a>这个项目增强了valine的功能，给valine增加了smtp服务支持，评论后台管理等功能。</p><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/04/0818.png" alt=""></p><p>选择云引擎——部署——从git源码部署，然后使用<a href="https://github.com/DesertsP/Valine-Admin作为代码库，并在该页面设置好环境变量，有一些必填的变量，如下表。我由于网站使用了根域名，并且使用了cname接入cloudflare，所以没办法再设置mx记录了，所以我没有再用域名邮箱，而失去mail.ru注册了一个邮箱(mail.ru支持域名邮箱，如果之后要换的话也方便)">https://github.com/DesertsP/Valine-Admin作为代码库，并在该页面设置好环境变量，有一些必填的变量，如下表。我由于网站使用了根域名，并且使用了cname接入cloudflare，所以没办法再设置mx记录了，所以我没有再用域名邮箱，而失去mail.ru注册了一个邮箱(mail.ru支持域名邮箱，如果之后要换的话也方便)</a></p><table><thead><tr><th>变量</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>SITE_NAME</td><td>Deserts</td><td>[必填]博客名称</td></tr><tr><td>SITE_URL</td><td><a href="https://deserts.io/">https://deserts.io</a></td><td>[必填]首页地址</td></tr><tr><td><strong>SMTP_SERVICE</strong></td><td>QQ</td><td>[新版支持]邮件服务提供商，支持 QQ、163、126、Gmail 以及 <a href="https://nodemailer.com/smtp/well-known/#supported-services">更多</a></td></tr><tr><td>SMTP_USER</td><td><a href="mailto:xxxxxx@qq.com">xxxxxx@qq.com</a></td><td>[必填]SMTP登录用户</td></tr><tr><td>SMTP_PASS</td><td>ccxxxxxxxxch</td><td>[必填]SMTP登录密码（QQ邮箱需要获取独立密码）</td></tr><tr><td>SENDER_NAME</td><td>Deserts</td><td>[必填]发件人</td></tr><tr><td>SENDER_EMAIL</td><td><a href="mailto:xxxxxx@qq.com">xxxxxx@qq.com</a></td><td>[必填]发件邮箱</td></tr><tr><td>ADMIN_URL</td><td><a href="https://xxx.leanapp.cn/">https://xxx.leanapp.cn/</a></td><td>[建议]Web主机二级域名，用于自动唤醒</td></tr><tr><td>BLOGGER_EMAIL</td><td><a href="mailto:xxxxx@gmail.com">xxxxx@gmail.com</a></td><td>[可选]博主通知收件地址，默认使用SENDER_EMAIL</td></tr><tr><td>AKISMET_KEY</td><td>xxxxxxxxxxxx</td><td>[可选]Akismet Key 用于垃圾评论检测，设为MANUAL_REVIEW开启人工审核，留空不使用反垃圾</td></tr></tbody></table><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/04/0824.png" alt="配置好环境变量"></p><p>配置好环境变量之后便可以重启/启动容器了。</p><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/04/0826.png" alt=""></p><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/04/0826.png" alt="查看应用日志 部署成功"></p><p>前往我们之前设置好的web主机域名下设置一个管理员账号 如我的 notesail.avosapps.us/sign-up <em>记得环境变量也要改</em></p><p>然后由于valine免费版的休眠规则</p><blockquote><p>免费版的 LeanCloud 容器，是有强制性休眠策略的，不能 24 小时运行：</p><ul><li>每天必须休眠 6 个小时</li><li>30 分钟内没有外部请求，则休眠。</li><li>休眠后如果有新的外部请求实例则马上启动（但激活时此次发送邮件会失败）。</li></ul></blockquote><p>所以我们需要添加两个定时器</p><p>一个为<code>0 0/30 7-23 * * ?</code>的self_wake规则，即每20分钟醒来一次</p><p>另一个为<code>0 0 8 * * ?</code>的resend规则，即每天早上八点补发一次邮件。</p><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/04/0832.png" alt=""></p><p>之后再重启一次引擎，大功告成，发邮件测试一下吧。</p><p>现在用户不需要登陆也能留下评论啦，但是此类评论有个不好的地方就是如果有人乱填邮箱就容易造成一些尴尬的情况，所以还是希望大家都自觉别乱填邮箱。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx访问日志记录cloudflare后真实ip</title>
      <link href="/posts/cloudflare-realip.html"/>
      <url>/posts/cloudflare-realip.html</url>
      
        <content type="html"><![CDATA[<h2 id="accesslog记录真实ip"><a href="#accesslog记录真实ip" class="headerlink" title="accesslog记录真实ip"></a>accesslog记录真实ip</h2><h3 id="官方方法"><a href="#官方方法" class="headerlink" title="官方方法"></a>官方方法</h3><p>使用<code>nginx -V 2&gt;&amp;1 | grep with-http_realip_module</code>，查看nginx是否包含http_realip_module模块，我的ubuntu18 apt安装的nginx已经带有该模块了，那么只需要前往 /etc/nginx/nginx.conf向http{}里面添加如下内容即可。<a href="https://support.cloudflare.com/hc/en-us/articles/200170786-Restoring-original-visitor-IPs-Logging-visitor-IP-addresses-with-mod-cloudflare-">https://support.cloudflare.com/hc/en-us/articles/200170786-Restoring-original-visitor-IPs-Logging-visitor-IP-addresses-with-mod-cloudflare-</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">set_real_ip_from 103.21.244.0&#x2F;22;</span><br><span class="line">set_real_ip_from 103.22.200.0&#x2F;22;</span><br><span class="line">set_real_ip_from 103.31.4.0&#x2F;22;</span><br><span class="line">set_real_ip_from 104.16.0.0&#x2F;12;</span><br><span class="line">set_real_ip_from 108.162.192.0&#x2F;18;</span><br><span class="line">set_real_ip_from 131.0.72.0&#x2F;22;</span><br><span class="line">set_real_ip_from 141.101.64.0&#x2F;18;</span><br><span class="line">set_real_ip_from 162.158.0.0&#x2F;15;</span><br><span class="line">set_real_ip_from 172.64.0.0&#x2F;13;</span><br><span class="line">set_real_ip_from 173.245.48.0&#x2F;20;</span><br><span class="line">set_real_ip_from 188.114.96.0&#x2F;20;</span><br><span class="line">set_real_ip_from 190.93.240.0&#x2F;20;</span><br><span class="line">set_real_ip_from 197.234.240.0&#x2F;22;</span><br><span class="line">set_real_ip_from 198.41.128.0&#x2F;17;</span><br><span class="line">set_real_ip_from 2400:cb00::&#x2F;32;</span><br><span class="line">set_real_ip_from 2606:4700::&#x2F;32;</span><br><span class="line">set_real_ip_from 2803:f800::&#x2F;32;</span><br><span class="line">set_real_ip_from 2405:b500::&#x2F;32;</span><br><span class="line">set_real_ip_from 2405:8100::&#x2F;32;</span><br><span class="line">set_real_ip_from 2c0f:f248::&#x2F;32;</span><br><span class="line">set_real_ip_from 2a06:98c0::&#x2F;29;</span><br><span class="line">use any of the following two</span><br><span class="line"></span><br><span class="line">real_ip_header CF-Connecting-IP;</span><br></pre></td></tr></table></figure><p>然后重启nginx即可生效</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>感觉该方法虽然能获取真实ip，但是会丢失一些数据…</p><blockquote><p>方法来源于 <a href="https://www.yunloc.com/647.html">https://www.yunloc.com/647.html</a></p></blockquote><p>分析nginx的access.log访问日志的时候，如果我们使用了cloudflare cdn，我们会发现记录的ip都是cloudflare的节点ip，那么该如何记录真实的访问者ip呢？</p><p><code>nano /etc/nginx/nginx.conf</code>修改nginx的配置文件，在http{}内加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">map $HTTP_CF_CONNECTING_IP $clientRealIp </span><br><span class="line">&#123;</span><br><span class="line">    &quot;&quot; $remote_addr;</span><br><span class="line">    ~^(?P&lt;firstAddr&gt;[a-z0-9.:]+),?.*$ $firstAddr;</span><br><span class="line">&#125;</span><br><span class="line">log_format access &#39;$clientRealIp [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">                  &#39;$http_user_agent $remote_addr $request_time&#39;;</span><br></pre></td></tr></table></figure><p>再在同一文件下的 access_log 末尾加上 access 如 <em>access_log /var/log/nginx/access.log access;</em>.</p><p><code>systemctl restart nginx</code>生效即可。</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="6612533591"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下管理Windows</title>
      <link href="/posts/linux-manage-windows.html"/>
      <url>/posts/linux-manage-windows.html</url>
      
        <content type="html"><![CDATA[<h2 id="Linux下进行Windows管理的一些想法"><a href="#Linux下进行Windows管理的一些想法" class="headerlink" title="Linux下进行Windows管理的一些想法"></a>Linux下进行Windows管理的一些想法</h2><p>之前提到了为了运行某服务，我在linux服务器下使用kvm虚拟化了一个windows server出来，但是由于我之前写好的用来管理该服务的QQ机器人只能运行在linux下，又懒得去修改了，而且平时使用命令行要比远程桌面效率更高一些，所以我采取了以下几点措施来实现在linux下进行windows管理。</p><ul><li>windows安装openssh服务，linux通过ssh控制windows</li><li>windows分享文件夹，linux直接通过网络挂载该文件夹</li></ul><a id="more"></a><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="6612533591"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="Windows安装openssh-server"><a href="#Windows安装openssh-server" class="headerlink" title="Windows安装openssh-server"></a>Windows安装openssh-server</h2><p>其实可以直接在系统-应用中安装，但是不知道为什么我这里卡在下载了…所以我改用手动下载安装的方式来安装openssh服务器。</p><p>前往github下载官方的openssh文件，<a href="https://github.com/PowerShell/Win32-OpenSSH/releases，将压缩包解压到*C:\Program">https://github.com/PowerShell/Win32-OpenSSH/releases，将压缩包解压到*C:\Program</a> Files*下，并打开一个cmd或者powershell，执行 <code>powershell.exe -ExecutionPolicy Bypass -File install-sshd.ps1</code>安装ssh，并执行<code>netsh advfirewall firewall add rule name=sshd dir=in action=allow protocol=TCP localport=22</code>放行端口。</p><p>然后解压得到的文件夹中有一个ssh_config.sample的文件，我将其改名为ssh_config，并移动到C:\ProgramData\ssh文件夹中<em>没有则新建该文件夹</em>，修改ssh_config，开启root登陆(Permitrootlogin)。</p><p>之后在powershell中输入 <code>net start sshd</code> 如果没有问题，sshd服务就正常启动了，之后使用 <code>ssh administrator@ip</code> 即可连接。</p><p>如果有报错可以查看Windows openssh的<a href="https://github.com/PowerShell/Win32-OpenSSH/wiki/">github wiki</a>，或者搜索issues。</p><p><img src="https://cdn.jsdelivr.net/gh/haojie06/imgStorage/imgs/2020/04/1238.png" alt=""></p><h3 id="Linux挂载Windows的共享文件夹"><a href="#Linux挂载Windows的共享文件夹" class="headerlink" title="Linux挂载Windows的共享文件夹"></a>Linux挂载Windows的共享文件夹</h3><p>有时候不想再开个远程桌面，或者想直接通过linux的web服务器来展示windows上的文件，那么可以采取windows共享文件夹，linux挂载该文件夹的方式来实现。在要共享的文件夹上右键，属性-&gt;共享。</p><p><img src="https://cdn.jsdelivr.net/gh/haojie06/imgStorage/imgs/2020/04/1215.png" alt=""></p><p>之后在linux上挂载也很简单，<code>mount -t cifs -o username=Administrator,password=password //192.168.0.200/bdx /home/minecraft/windows/</code></p><p>即可成功挂载。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kvm单网卡桥接模式</title>
      <link href="/posts/kvm-bridge.html"/>
      <url>/posts/kvm-bridge.html</url>
      
        <content type="html"><![CDATA[<h2 id="Ubuntu18-kvm单网卡桥接"><a href="#Ubuntu18-kvm单网卡桥接" class="headerlink" title="Ubuntu18 kvm单网卡桥接"></a>Ubuntu18 kvm单网卡桥接</h2><p>家里有一台nuc8作为服务器使用，平时都是使用ubuntu18，但是由于某项服务在linux下运行出现异常，而经过朋友的测试，在windows下可以正常运行，于是我考虑使用kvm在Linux上虚拟化一个windows server来使用。安装相关程序的教程网上有很多也比较简单，这里就不赘述了，但是在装好程序之后，我试了很多种方法才最终配置好了虚拟机的桥接，所以写下这篇文章记录一下。</p><a id="more"></a><div class="tocStart"></div><!-- toc --><ul><li><a href="#系统中添加网桥">系统中添加网桥</a></li><li><a href="#libvirt中添加网桥">libvirt中添加网桥</a></li><li><a href="#修改虚拟机网络配置">修改虚拟机网络配置</a></li><li><a href="#参考">参考</a></li></ul><!-- tocstop --><div class="tocEnd"></div> 下面的操作可能会导致网络中断，远程连接断开，能直接在宿主机上连接显示器操作是最方便的了<h3 id="系统中添加网桥"><a href="#系统中添加网桥" class="headerlink" title="系统中添加网桥"></a>系统中添加网桥</h3><p>ubuntu18的网络接口使用netplan来管理，配置文件位于<em>/etc/netplan/</em>下，以我的为例。<code>nano /etc/netplan/01-network-manager-all.yaml</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">network:</span><br><span class="line">  ethernets:</span><br><span class="line">        eno1:</span><br><span class="line">            dhcp4: no</span><br><span class="line"></span><br><span class="line">  bridges:</span><br><span class="line">      br0:</span><br><span class="line">        interfaces: [eno1]</span><br><span class="line">        dhcp4: no</span><br><span class="line">        addresses: [192.168.0.100&#x2F;24]</span><br><span class="line">        gateway4: 192.168.0.1</span><br><span class="line">        parameters:</span><br><span class="line">          stp: true</span><br><span class="line">          forward-delay: 4</span><br><span class="line">        nameservers:</span><br><span class="line">          addresses: [192.168.0.1]</span><br><span class="line">  version: 2</span><br></pre></td></tr></table></figure><p>注意到这里需要把物理网卡eno1的dhcp关掉(<em>我之前也没使用dhcp，而是使用静态ip192.168.0.100</em>)，改用在br0网桥将ip设置成之前物理网卡的静态ip 192.168.0.100，当然，在这也可以使用dhcp。</p><p>然后使用<code>netplan apply</code>命令，之后使用<code>ifconfig</code>查看网卡信息，我们可以看到物理网卡上已经没有ip了，而多出了一个叫br0的网络设备，ip就是我们指定的192.168.0.100，之后我们在网络中依旧可以用192.168.0.100访问该服务器。</p><h3 id="libvirt中添加网桥"><a href="#libvirt中添加网桥" class="headerlink" title="libvirt中添加网桥"></a>libvirt中添加网桥</h3><p>虽然在系统中添加了网桥，但是此时在virt-manager中是看不到我们添加的网桥的，还需要在virsh中添加一个网桥配置。</p><p>新建一个名为bridge.xml的文件，编辑如下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">network</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>kvm-bridge<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">forward</span> <span class="attr">mode</span>=<span class="string">"bridge"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bridge</span> <span class="attr">name</span>=<span class="string">"br0"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">network</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后执行下列命令来加载该配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">virsh net-define bridge.xml</span><br><span class="line">virsh net-start kvm-bridge</span><br><span class="line">virsh net-autostart kvm-bridge</span><br></pre></td></tr></table></figure><p>之后执行<code>virsh net-list --all</code>即可看到我们添加的libvirt网桥了。</p><p><img src="https://cdn.jsdelivr.net/gh/haojie06/imgStorage/imgs/2020/04/1118.png" alt=""></p><h3 id="修改虚拟机网络配置"><a href="#修改虚拟机网络配置" class="headerlink" title="修改虚拟机网络配置"></a>修改虚拟机网络配置</h3><p>这里我直接使用了virt-manager图形化管理工具，修改虚拟机的网络设备，注意到此时已经可以直接看到kvm-bridge网络了。</p><p><img src="https://cdn.jsdelivr.net/gh/haojie06/imgStorage/imgs/2020/04/1121.png" alt=""></p><p>之后开启kvm虚拟机，理论上就可以分配到192.168.0.1/24上的ip了，如果没有的话可以去适配器选项里面手动指定ip。</p><p><img src="https://cdn.jsdelivr.net/gh/haojie06/imgStorage/imgs/2020/04/1123.png" alt=""></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://fabianlee.org/2019/04/01/kvm-creating-a-bridged-network-with-netplan-on-ubuntu-bionic/">https://fabianlee.org/2019/04/01/kvm-creating-a-bridged-network-with-netplan-on-ubuntu-bionic/</a></p><hr><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="6612533591"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
            <tag> kvm </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Linux上运行bdx(BedrockX)开设基岩版MC插件服</title>
      <link href="/posts/linux-bedrockx.html"/>
      <url>/posts/linux-bedrockx.html</url>
      
        <content type="html"><![CDATA[<h2 id="BedrockX-开设基岩版插件服"><a href="#BedrockX-开设基岩版插件服" class="headerlink" title="BedrockX 开设基岩版插件服"></a>BedrockX 开设基岩版插件服</h2><div class="tocStart"></div><!-- toc --><ul><li><a href="#在windows上生成服务端程序">在windows上生成服务端程序</a></li><li><a href="#安装wine50">安装wine5.0</a><ul><li><a href="#安装c运行库">安装C++运行库</a></li></ul></li><li><a href="#开始运行bdx">开始运行bdx</a></li><li><a href="#参考">参考</a></li></ul><!-- tocstop --><div class="tocEnd"></div>bds的推出使得基岩版终于能够开设私人专用服务器，但是由于mojang并不重视服务端的开发，在bds推出一年多以后服务端依旧是bug多多，且不提供插件api，不具有行为包的完整特性，看上去就像是一个半成品。(虽然官方也说了这就是alpha版本)这也给多人服务器的开设造成了巨大的不方便，比如无法传送到他人的位置，无法使用领地保护*(曾经我们都是用命令方块来圈地的)*，无法反作弊等等。虽然官方推出的服务端就是个半成品，但是一年多来各位大佬为更好的开服体验做出了诸多的贡献，比如之前的Codehz的StoneServer，Sysca11的bdlauncher等等作品都在原版bds的基础上提供了api，Codehz的StoneServer扩展了官方的脚本api(在官方将其从bds中国移除之后Codehz还自己将api加了进去)使得用js制作服务端插件成为可能，而Sysca11在他的bdlauncher基础上还做出了圈地/传送/经济等各种插件...这些在一开始都是难以想象的，bds服能有今天那么丰富的内容首先得感谢诸位开发者的贡献。<p>随着时间的发展，支持插件的服务端也在变化，Stoneserver很可惜的停更了，但是Codehz在最近推出了全新的Element Zero，而bdl也发展成了bdx。这两者和之前的服务端的一个巨大的差异就是，他们都是基于windows版本的bds，<del>据说</del>在性能上相对linux的bds会有很大的提升，并且可以在windows server上使用了，<strong>linux也依旧可以通过wine来使用。</strong>这篇文章介绍如何在Linux上使用bdx，如果要在windows上使用的话则可以参考 <a href="https://www.jianshu.com/p/e1ccd0f96fd6">https://www.jianshu.com/p/e1ccd0f96fd6</a> 。 </p><p><strong><a href="https://github.com/Sysca11/BedrockX-bin">bdx项目地址</a></strong></p><blockquote><p>本机环境</p><p>Windows10</p><p>Ubuntu1804 （因为bdx需要在wine5.0以上运行，推荐直接使用1904以上的系统。）</p></blockquote><h3 id="在windows上生成服务端程序"><a href="#在windows上生成服务端程序" class="headerlink" title="在windows上生成服务端程序"></a>在windows上生成服务端程序</h3><p>据作者所说</p><blockquote><p>注意：RoDB.exe在wine环境似乎工作不正常，请用相同pdb在windows下生成symdb，再复制过来</p></blockquote><p>所以我们现在windows上运行程序，生成所需要的资源，在成功运行bdx之后再打包放到我们的linux服务器上。</p><p>新建一个文件夹(我这里就叫bdx了)，从<a href="https://minecraft.net/en-us/download/server/bedrock/">官网</a>下载<strong>windows 版本的服务端压缩包</strong>放进去，然后从<a href="https://github.com/Sysca11/BedrockX-bin">项目页面</a>下载base_env.7z、release_dbg_x.7z两个文件放到该文件夹下。</p><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/04/0529.png" alt=""></p><p>解压三个文件夹，然后将得到的base_env和release_xx两个文件夹中的文件都移动到得到的两个文件夹外(bdx文件夹中)。运行 RoDB.exe,如果bedrock_server.symdb和bedrock_server.symdef两个文件生成的话就可以了。之后双击运行bedrock_server.exe，如果显示如下，就算成功在windows上配置运行了。</p><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/04/0539.png" alt=""></p><p>如果你是windows开服到这里就足够了，不过要是你想用linux开服就还要多做几步。</p><p>使用zip将整个bdx文件夹压缩，并使用sftp之类的方式传送到服务器上。</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="6612533591"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="安装wine5-0"><a href="#安装wine5-0" class="headerlink" title="安装wine5.0"></a>安装wine5.0</h3><p><strong>bdx需要在wine5.0以上的环境运行，不然会出错。</strong>可惜大部分源中的wine都是3.0左右的版本。所以我们还需要添加源并安装wine5.0。以ubuntu为例(下面的方法1604~1910都可用)。此处参考了<a href="http://ubuntuhandbook.org/index.php/2020/01/install-wine-5-0-stable-ubuntu-18-04-19-10/">ubuntuhandbook</a>的教程.</p><blockquote><p><strong>1904以下的版本</strong><br>ubuntu1904以下的版本如果直接安装会遇到很多依赖无法解决的问题，所以请首先安装下列依赖。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">sudo apt-get install libgnutls30:i386 libldap-2.4-2:i386 libgpg-error0:i386 libxml2:i386 libasound2-plugins:i386 libsdl2-2.0-0:i386 libfreetype6:i386 libdbus-1-3:i386 libsqlite3-0:i386</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>龟速下载警告！！</strong></p><p>下面这些操作使用了国外的软件源，如果你的服务器在国内，大概率在下载时遇到速度基本没有的情况(得下载几百MB的文件)，所以强烈建议使用代理。</p><p>在服务器上运行代理软件之后，假设在1080端口开启了socks5代理，那么在使用apt命令的时候只需要使用 <em>sudo apt-get -o Acquire::http::proxy=”socks5h://127.0.0.1:1080/“ update</em> 这样的形式即可。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg --add-architecture i386</span><br><span class="line">wget -nc https://dl.winehq.org/wine-builds/winehq.key; sudo apt-key add winehq.key</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下面的eoan请修改成和系统对应的代号 如 ubuntu1804 改成 bionic ubuntu 1604改成 xenial</span></span><br><span class="line">sudo apt-add-repository 'deb https://dl.winehq.org/wine-builds/ubuntu/ eoan main'</span><br><span class="line">sudo add-apt-repository ppa:cybermax-dexter/sdl2-backport</span><br><span class="line"><span class="meta">#</span><span class="bash"> 最后开始安装wine5.0</span></span><br><span class="line">sudo apt update &amp;&amp; sudo apt install --install-recommends winehq-stable</span><br></pre></td></tr></table></figure><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="6612533591"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><p>如果网络够好的话很快就能装上，网络不好的话…一天都装不上。安装完毕之后使用wine –version，显示5.0即可。<em>我在另一台服务器上遇到了缺少libfdk-aac库的情况，前往<a href="https://ubuntu.pkgs.org/18.04/ubuntu-multiverse-i386/libfdk-aac1_0.1.5-1_i386.deb.html下载amd64和i386版本的deb包手动使用dpkg">https://ubuntu.pkgs.org/18.04/ubuntu-multiverse-i386/libfdk-aac1_0.1.5-1_i386.deb.html下载amd64和i386版本的deb包手动使用dpkg</a> -i 安装之后即可</em></p><h4 id="安装C-运行库"><a href="#安装C-运行库" class="headerlink" title="安装C++运行库"></a>安装C++运行库</h4><p>这一步需要有图形界面的操作，你可以在linux服务器上安装图形界面并使用vnc进行下面的操作，也可以使用xshell+xmanager的方式来安装,推荐使用后者(不需要额外安装图形界面)。</p><p>在服务器上执行(vnc图形界面中执行或者xshell中执行)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.visualstudio.microsoft.com/download/pr/8c211be1-c537-4402-82e7-a8fb5ee05e8a/B6C82087A2C443DB859FDBEAAE7F46244D06C3F2A7F71C35E50358066253DE52/VC_redist.x64.exe</span><br><span class="line">wine VC_redist.x64.exe</span><br></pre></td></tr></table></figure><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/04/0703.png" alt="首次运行wine的时候会让你装一些扩展，装不装都可以"></p><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/04/0704.png" alt="xmanager的效果"></p><h3 id="开始运行bdx"><a href="#开始运行bdx" class="headerlink" title="开始运行bdx"></a>开始运行bdx</h3><p>将之前的bdx压缩包上传到服务器上并解压后，进到bdx文件夹中，使用<code>wine bedrock_server.exe</code>即可开启bdx服务端了。</p><p>如果觉得大量的DEBUG信息太碍眼的话可以使用<code>export WINEDEBUG=-all</code>隐藏DEBUG信息输出。</p><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/04/0604.png" alt=""></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://ubuntuhandbook.org/index.php/2020/01/install-wine-5-0-stable-ubuntu-18-04-19-10/">安装wine5.0</a></li><li><a href="https://www.jianshu.com/p/e1ccd0f96fd6">windows运行bdx</a></li><li><a href="https://github.com/Sysca11/BedrockX-bin/blob/master/guide.txt">bdx项目的介绍</a></li></ul><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="6612533591"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Minecraft </tag>
            
            <tag> Minecraft服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Chevereto自建图床</title>
      <link href="/posts/chevereto-imgbed.html"/>
      <url>/posts/chevereto-imgbed.html</url>
      
        <content type="html"><![CDATA[<h2 id="Chevereto自建图床"><a href="#Chevereto自建图床" class="headerlink" title="Chevereto自建图床"></a>Chevereto自建图床</h2><p>免费的图床用过很多，但是用免费的公共图床有一个巨大的风险，万一那天图床跑路了或者倒闭了，你的图就全部”裂开了”，而且你也大概率找不到以前写一篇文章的时候到底都用了哪些图片…之前这个博客里很多图片用的阿里云oss作为图床，阿里云的速度的确快，并且数据也要安全得多，但是如果访问量较大(当然我的网站都远远达不到那个程度)流量费用也会用掉不少钱，所以为了图片不”裂开”<del>其实也是为了折腾着玩</del>，我用我的一台国外服务器使用chevereto搭建了一个图床自用。</p><a id="more"></a><blockquote><p>其实自建图床也有挺大的风险，其实最稳的还是使用对象储存服务</p><ul><li>如果机器”不慎”被删除，你的数据就全丢了</li><li>如果你域名不想续费了，得修改数据库中的图片路径，以及你写过的文章中的图片路径</li><li>如果要换服务器迁移起来也挺麻烦的</li></ul></blockquote><h3 id="安装lnmp环境"><a href="#安装lnmp环境" class="headerlink" title="安装lnmp环境"></a>安装lnmp环境</h3><p>Chevereto同样需要lnmp环境，具体的安装方法我在<a href="https://notesail.com/posts/setup-typecho">ubuntu手动安装lnmp+Typecho</a>这篇文章里有写，这里就不赘述了，大概说一下不同的地方就好。</p><p>我在/etc/nginx/sites-available新建了一个站点配置文件，名为img，内容大概如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    root &#x2F;var&#x2F;www&#x2F;html&#x2F;Chevereto;</span><br><span class="line">    # Add index.php to the list if you are using PHP</span><br><span class="line">    index index.html index.htm index.nginx-debian.html index.php;</span><br><span class="line">    server_name source.mytor.ch;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        # First attempt to serve request as file, then</span><br><span class="line">        # as directory, then fall back to displaying a 404.</span><br><span class="line">        try_files $uri $uri&#x2F; &#x3D;404;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">    include snippets&#x2F;fastcgi-php.conf;</span><br><span class="line">    fastcgi_pass             unix:&#x2F;var&#x2F;run&#x2F;php&#x2F;php7.2-fpm.sock;</span><br><span class="line">    fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    listen 443 ssl;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    server_name source.mytor.ch;</span><br><span class="line">    listen 80;</span><br><span class="line">    return 404; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后建立软链接<code>ln -s /etc/nginx/sites-available/img /etc/nginx/sites-enable/</code>使用certbot自动配置证书,并设置http到https的重定向。</p><p>另外创建chevereto数据库(至于怎么做另一篇文章里都有写)，用户，并赋权。</p><p>配置php,<code>nano /etc/php/7.2/fpm/php.ini</code>,修改了上传文件的上限以及内存使用的上限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">post_max_size &#x3D; 200M</span><br><span class="line">memory_limit &#x3D; 1024M</span><br><span class="line">max_execution_time &#x3D; 360</span><br><span class="line">upload_max_filesize &#x3D; 200M</span><br><span class="line">date.timezone &#x3D; Asia&#x2F;Shanghai</span><br></pre></td></tr></table></figure><p>使用<code>systemctl restart php7.2-fpm</code>重启php。</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="6612533591"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h4 id="安装Chevereto"><a href="#安装Chevereto" class="headerlink" title="安装Chevereto"></a>安装Chevereto</h4><p>我直接采用了安装器安装的方式，在/var/www/html下新建一个名为Chevereto的目录，下载<a href="https://chevereto.com/download/file/installer">installer.php</a>并上传，目录权限设置为755，用户设为www-data:www-data即可，然后访问域名如 <a href="https://source.mytor.ch/installer.php，进入到安装配置页面，首先他会检测你的路径以及web服务器，并提示你需要添加一些服务器规则到站点配置文件中，点击**server">https://source.mytor.ch/installer.php，进入到安装配置页面，首先他会检测你的路径以及web服务器，并提示你需要添加一些服务器规则到站点配置文件中，点击**server</a> rules<em><em>就可以看到了,在我这里需要像img站点文件的server大括号中添加如下内容，并重启服务器。</em>如果不做这一步，之后的安装会失败。</em></p><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/03/0154.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># Chevereto nginx generated rules for https:&#x2F;&#x2F;source.mytor.ch&#x2F;</span><br><span class="line">## Disable access to sensitive files</span><br><span class="line">location ~* &#x2F;(app|content|lib)&#x2F;.*\.(po|php|lock|sql)$ &#123;</span><br><span class="line">  deny all;</span><br><span class="line">&#125;</span><br><span class="line">## CORS headers</span><br><span class="line">location ~* &#x2F;.*\.(ttf|ttc|otf|eot|woff|woff2|font.css|css|js) &#123;</span><br><span class="line">  add_header Access-Control-Allow-Origin &quot;*&quot;;</span><br><span class="line">&#125;</span><br><span class="line">## Upload path for image content only and set 404 replacement</span><br><span class="line">location ^~ &#x2F;images&#x2F; &#123;</span><br><span class="line">  location ~* (jpe?g|png|gif) &#123;</span><br><span class="line">      log_not_found off;</span><br><span class="line">      error_page 404 &#x2F;content&#x2F;images&#x2F;system&#x2F;default&#x2F;404.gif;</span><br><span class="line">  &#125;</span><br><span class="line">  return 403;</span><br><span class="line">&#125;</span><br><span class="line">## Pretty URLs</span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">  index index.php;</span><br><span class="line">  try_files $uri $uri&#x2F; &#x2F;index.php?$query_string;</span><br><span class="line">&#125;</span><br><span class="line"># END Chevereto nginx rules</span><br></pre></td></tr></table></figure><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/03/0141.png" alt=""></p><p>完成配置后，设置好数据库用户/密码/数据库名字等信息之后，便可以开始安装了。</p><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/03/0155.png" alt=""></p><p>安装成功之后，我们的自建图床就可以访问啦。</p><p><img src="https://imgs.cdn.mytor.ch/images/2020/03/19/image.png" alt="来自图床的图片"></p><h3 id="额外设置"><a href="#额外设置" class="headerlink" title="额外设置"></a>额外设置</h3><p>我还进行了一些额外设置。使用管理员账号登陆后，点击右上角即可进入图床设置仪表盘。</p><p>在这里我修改了禁止注册(因为是私人图床)，禁止游客上传，修改了上传图片的大小限制等等操作。</p><p>另外，在上传主题图片的时候出现了 <em>nginx: 413 Request Entity Too Large</em> 的错误，原来只修改php的上传设置还不行，还需要修改nginx的设置，编辑/etc/nginx/nginx.conf，在http{}中加入client_max_body_size 200m; 然后重启nginx即可。</p><h3 id="搭配CDN使用"><a href="#搭配CDN使用" class="headerlink" title="搭配CDN使用"></a>搭配CDN使用</h3><p>因为欧洲的服务器在大陆访问速度不稳定，我考虑搭配cloudflare使用，如果是直接使用cloudflare的域名服务器，那很简单，直接把cdn的开关打开，云朵变成橙色就好了，但是我采用的是cname接入的方式，那就麻烦一些。现在图床的源站域名是 img.mytor.ch，我们要去cloudflare partner里添加CNAME接入，如 img.cdn.mytor.ch-》img.mytor.ch，再去dnspod里面添加CNAME记录，将img.cdn.mytor.ch 解析到 <strong>source.mytor.ch.cdn.cloudflare.net</strong> （partner提供的CNAME值），还需要在站点配置文件里面<strong>同时设置两个域名的根目录，http转https等配置</strong>(直接并列写上去就好了如 server_name source.mytor.ch mytor.ch)，等一段时间后生效即可，之后使用图床可以访问imgs.cdn.mytor.ch即可。之后还要去chevereto的设置-外部服务里面设置cdn链接以及开启cloudflare，不然无法上传图片。</p><p><img src="https://imgs.cdn.mytor.ch/images/2020/03/19/image0460612f7e1b0c2f.png" alt="image0460612f7e1b0c2f.png"></p><p><a href="https://imgs.cdn.mytor.ch/image/C6u"><img src="https://imgs.cdn.mytor.ch/images/2020/03/19/image1c411801a7c544bd.png" alt="image1c411801a7c544bd.png"></a></p><p><img src="https://imgs.cdn.mytor.ch/images/2020/03/19/imagee3848a2789684d94.png" alt="imagee3848a2789684d94.png"></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="6612533591"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu手动安装lnmp+Typecho</title>
      <link href="/posts/setup-typecho.html"/>
      <url>/posts/setup-typecho.html</url>
      
        <content type="html"><![CDATA[<h3 id="手动安装配置lnmp-typecho"><a href="#手动安装配置lnmp-typecho" class="headerlink" title="手动安装配置lnmp+typecho"></a>手动安装配置lnmp+typecho</h3><p>这两天寻思着弄一个动态网站作为个人日常的博客，又不太想用wordpress这过于”重量级”的cms，想起了以前也用过的typecho，但是安装过程中遇见了一些困难，发现现在网上极其缺少手动安装typecho的教程，不是过时的教程就是宝塔一键脚本一起上…所以我还是分享一下我是如何安装typecho的吧。</p><a id="more"></a><h4 id="安装lnmp"><a href="#安装lnmp" class="headerlink" title="安装lnmp"></a>安装lnmp</h4><p>我们首先准备typecho的环境，lnmp即(linux + nginx + mysql + php)。我使用的系统是Ubuntu 1804，所有Debian系的系统操作应该都类似，其他系的系统需要修改一下指令。</p><h5 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a>安装php</h5><p><code>sudo apt install php-fpm php-common php-mbstring php-xmlrpc php-soap php-gd php-xml php-intl php-mysql php-cli php-ldap php-zip php-curl</code></p><p>如果要修改php的配置如上传文件限制内存上限等等，编辑 <code>sudo nano /etc/php/7.2/fpm/php.ini</code> 文件即可。</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="6612533591"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h5 id="nginx安装并配置php-https"><a href="#nginx安装并配置php-https" class="headerlink" title="nginx安装并配置php/https"></a>nginx安装并配置php/https</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install nginx</span><br></pre></td></tr></table></figure><h6 id="配置https"><a href="#配置https" class="headerlink" title="配置https"></a>配置https</h6><p>安装好nginx后，我们编辑站点配置文件,把里面的server_name的example.com修改成你自己的域名(当然域名要设置好A记录解析到当前服务器上)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure><p>然后使用certbot自动申请配置ssl证书，采取certbot的<a href="https://certbot.eff.org/lets-encrypt/ubuntubionic-nginx">官方教程</a>(官方有各个发行版的详细教程)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install software-properties-common</span><br><span class="line">sudo add-apt-repository universe</span><br><span class="line">sudo add-apt-repository ppa:certbot/certbot</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install certbot python-certbot-nginx</span><br><span class="line">sudo certbot --nginx</span><br></pre></td></tr></table></figure><p>运行certbot后，会先要求你输入邮箱，如果之前对站点配置文件没配置错的话，那应该就能看见你的域名，选择该域名，certbot便会自动申请配置证书，最后还会选择是否要把http重定向为https，选择redirect即可。完成之后再访问你的域名，理论上能以https的方式访问到nginx的默认index.html。</p><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/03/1026.png" alt=""></p><h6 id="配置php"><a href="#配置php" class="headerlink" title="配置php"></a>配置php</h6><p>同样编辑站点配置文件 <em>/etc/nginx/sites-available/default</em> ，在server的大括号中添加如下内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">include snippets&#x2F;fastcgi-php.conf;</span><br><span class="line">fastcgi_pass             unix:&#x2F;var&#x2F;run&#x2F;php&#x2F;php7.2-fpm.sock;</span><br><span class="line">fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后重启一下nginx,在 <em>/var/www/html</em> 目录下创建一个info.php文件，写入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   phpinfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>再访问你的域名/info.php，如果显示如下就配置成功了。</p><p><img src="https://i.loli.net/2020/03/19/citf46AzFwBZ83P.png" alt="info.php"></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="6612533591"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h5 id="安装配置mysql"><a href="#安装配置mysql" class="headerlink" title="安装配置mysql"></a>安装配置mysql</h5><p>typecho其实还支持sqlite，直接安装php的sqlite扩展以及sqlite3就可以使用了，但是由于我使用的插件在使用sqlite时会出错，所以我还是改用了mysql。</p><p><code>sudo apt install mysql</code></p><p>接着我们需要创建typecho的用户以及相应的数据库并赋权。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> typecho;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'typecho'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123456'</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> typecho.* <span class="keyword">TO</span> <span class="string">'typecho'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123456'</span>;</span><br><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br><span class="line">EXIT;</span><br></pre></td></tr></table></figure><h4 id="安装Typecho"><a href="#安装Typecho" class="headerlink" title="安装Typecho"></a>安装Typecho</h4><p>之前的步骤做完后我们已经准备好了lnmp环境了，接着就是安装typecho。</p><p>前往Typecho的网站获取下载链接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 在/var/www/html 里面执行</span></span><br><span class="line">wget https://typecho.org/downloads/1.1-17.10.30-release.tar.gz</span><br><span class="line">tar -zxvf 1.1-17.10.30-release.tar.gz</span><br><span class="line">mv build typecho</span><br><span class="line">chown -R www-data:www-data</span><br><span class="line">chmod -R 755 typecho</span><br></pre></td></tr></table></figure><p>另外还建议修改 <em>/etc/nginx/sites-available/default</em> 将站点根目录修改为 <em>/var/www/htm</em>l/typecho 并重启一下nginx。</p><p>之后访问 <a href="https://yourdomain/install.php">https://yourdomain/install.php</a> （如果没改根目录的话就是/typecho/install.php）</p><p>配置时，数据库名字，用户名，密码都改成之前创建数据库时使用的参数就好，如果没有什么其他的问题，完成几步操作之后便安装成功了。</p><h6 id="伪静态设置"><a href="#伪静态设置" class="headerlink" title="伪静态设置"></a>伪静态设置</h6><p>默认的typecho网页链接中总带着一个index.php，那么有没有办法把这个链接美化一下呢？我们需要开启typecho的伪静态。首先编辑nginx的站点文件，在server大括号中加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if (-f $request_filename&#x2F;index.html)&#123;</span><br><span class="line">rewrite (.*) $1&#x2F;index.html break;</span><br><span class="line">&#125;</span><br><span class="line">if (-f $request_filename&#x2F;index.php)&#123;</span><br><span class="line">rewrite (.*) $1&#x2F;index.php;</span><br><span class="line">&#125;</span><br><span class="line">if (!-f $request_filename)&#123;</span><br><span class="line">rewrite (.*) &#x2F;index.php;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并前往typecho控制面板的设置/永久链接中打开启用地址重写功能(可能会提示不可用，还是选择应用即可)然后重启一下nginx。再看，index.php已经没了。</p><p><img src="https://i.loli.net/2020/03/19/Wngtjps8DUOo36q.png" alt="image.png"></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="6612533591"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站 </tag>
            
            <tag> typecho </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cloudflare自定义节点 加速访问</title>
      <link href="/posts/cloudflare-custom.html"/>
      <url>/posts/cloudflare-custom.html</url>
      
        <content type="html"><![CDATA[<h2 id="cloudflare自选节点-加速访问"><a href="#cloudflare自选节点-加速访问" class="headerlink" title="cloudflare自选节点 加速访问"></a>cloudflare自选节点 加速访问</h2><p>之前的文章提到了，我使用了github page + coding page双部署的方法来存放我的博客，并配合dnspod智能解析，让国内用户直接访问coding page，境外直接访问github page，一方面是为了加速境内的访问，另一方面也是为了让百度蜘蛛能够顺利爬取博客的内容(因为github page是禁止了百度蜘蛛的访问的)。但是部署几天后，有人向我反馈了中国移动打开我的网站缓慢，甚至根本打不开，我一开始还以为他们解析到了github page所以访问慢，没想到一看记录，他们无法访问的ip是腾讯云新加坡的coding page…看来移动真的是令人头疼，今天我尝试使用了cloudflare并自定义节点，让移动直接访问cloudflare的香港节点，令人惊喜的是，改用cloudflare香港节点后，移动的访问速度有了挺大的提升。关于自选节点，其实网上已经有了很多教程了，不过感觉很多都比较杂乱，所以干脆写一个简洁明了一些的出来。</p><a id="more"></a><h3 id="自选节点"><a href="#自选节点" class="headerlink" title="自选节点"></a>自选节点</h3><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="6612533591"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="设置CNAME接入"><a href="#设置CNAME接入" class="headerlink" title="设置CNAME接入"></a>设置CNAME接入</h3><p>在cloudflare的官网上，免费版用户是没办法使用CNAME接入cloudflare的，只能使用修改域名服务器接入的方式，不过在cloudflare partner的网站上我们就可以使用cname接入了，网上有不少cloudflare partner的接入平台，如<a href="https://cdn.moeelf.com/">萌精灵</a>,<a href="http://cdn.bnxb.com/">笨牛</a>,<a href="https://cdn.wzfou.com/">挖站否</a> ,我这以萌精灵为例。</p><p>添加CNAME记录，以本网站为例子，因为我直接就是notesail.com所以我直接添加@记录即可，指向源站，即我们加速前的网站的域名 如 example.github.io。</p><p><img src="https://cdn.jsdelivr.net/gh/haojie06/imgStorage/imgs/2020/03/0247.png" alt=""></p><p>添加成功后，下面就会出现一条CNAME接入的记录。</p><p><img src="https://cdn.jsdelivr.net/gh/haojie06/imgStorage/imgs/2020/03/0249.png" alt=""></p><p>复制这个CNAME，前往支持支持智能DNS的服务商处(<strong>如果想要自选节点，必须要支持智能解析</strong>)，我使用的是dnspod，添加一条CNAME记录，主机记录为@，类型CNAME，线路类型默认，记录值就填写上面这个CNAME记录。做完这一步，我们便完成CNAME接入了，如果没有其他的记录(如dnspod中的分线路解析)，我们直接访问notesail.com便是经过cdn访问了。</p><h4 id="选择节点ip"><a href="#选择节点ip" class="headerlink" title="选择节点ip"></a>选择节点ip</h4><p>这一步很简单，比如cloudflare的香港节点对于中国移动的访问比较友好，那么我们先找出cloudflare的节点ip，这里列出一些(来自于<a href="https://wzfou.com/question/11632/">挖站否)</a>，更多的ip请去他们那看。</p><blockquote><p>108.162.236.1/24 联通 走美国<br>172.64.32.1/24 移动 走香港</p><p>104.16.160.1/24 电信 走美国洛杉矶</p><p>172.64.0.0/24 电信 美国旧金山<br>104.20.157.0/24 联通 走日本<br>104.28.14.0/24 移动 走新加坡<br><code>（联通移动推荐节点）</code>104.23.240.0-104.23.243.254<br><code>（电信推荐百度云合作ip）</code>162.159.208.4-162.159.208.103<br><code>162.159.209.4-162.159.209.103</code>162.159.210.4-162.159.210.103<br>``162.159.211.4-162.159.211.103 </p></blockquote><p>比如我想加速移动的访问速度，让移动都走香港节点，那么我选用172.64.32.1这个ip(可以现在ipip.net这样的网站上看看移动节点的路由和ping值怎么样，如果你不是移动网络，不要在你本地尝试，因为anycast下电信用这个ip还是会跑到美国去的)。</p><p><img src="https://cdn.jsdelivr.net/gh/haojie06/imgStorage/imgs/2020/03/0259.png" alt=""></p><p>选择这个节点，只需要在dnspod中添加一个A记录，主机名@，线路选移动，记录值就填写这个ip即可。等待几分钟后再用移动访问，看看速度是否快一些了呢？如果不确定自己是不是真的走了cdn节点，走的是哪个地方的节点，可以在网址后面加上/cdn-cgi/trace即可。</p><p>如我使用移动访问本站加上/cdn-cgi/trace后，colo=HKG，的确走了香港节点。</p><p><img src="https://cdn.jsdelivr.net/gh/haojie06/imgStorage/imgs/2020/03/0303.png" alt=""></p><h3 id="使用CDN后出现重定向次数过多的错误"><a href="#使用CDN后出现重定向次数过多的错误" class="headerlink" title="使用CDN后出现重定向次数过多的错误"></a>使用CDN后出现重定向次数过多的错误</h3><p>我们有时候在开启CDN后会出现重定向过多的错误，无法访问网站，网上的介绍如下(<a href="https://www.wpzhiku.com/wordpress-wang-zhan-shi-yong-cloudflare-hou-ti-shi-jiang-nin-chong-ding-xiang-de-ci-shu-guo-duo-de-yuan-yin-ji-jie-jue-ban-fa/">来自wordpress智库</a>):</p><blockquote><p>Cloudflare CDN 配置</p><ul><li>Flexible：当我们的源网站没有配置 HTTPS 支持时，启用这个选项，Cloudflare 会在回源的时候通过 HTTP 协议访问我们的网站。</li><li>Full：当我们的源网站支持 HTTPS，但是 HTTPS 证书和域名不匹配或者是自签名证书时，Cloudflare 会通过 HTTPS 协议访问源网站，但不会验证证书，也就是说，即使我们的源网站提供的 HTTPS 证书不受浏览器信任，Cloudflare 也会通过 HTTPS 回源网站。</li><li>Full(strict)：当我们的源网站支持 HTTP ，并且证书有效时（未过期且受信任）。Cloudflare 会通过 HTTPS 协议访问源网站，并在每个请求过程中验证证书。</li></ul><p>了解了上面各个设置的功能，我们来看一下 Cloudflare 的循环重定向问题是怎么出现的，在 Cloudflare 中开启了 SSL 后，访问网站时出现循环重定向需满足下面两个条件：</p><ol><li>SSL 中设置了 Flexible，CDN 以 HTTP 协议回源网站。</li><li>源网站支持 HTTPS，并且设置了通过 HTTP 协议访问时，自动跳转到 HTTPS 协议。</li></ol><p>到这里，可能就有朋友发现问题了，我们访问 Cloudflare 的 <a href="https://www.wpzhiku.com/tag/cdn/">CDN</a> 服务器的时候，是通过 HTTPS 访问的，CDN 访问源网站的时候，是通过 HTTP 访问的，源网站上 HTTP 又自动跳转了 HTTPS，完美的一个循环重定向。重定向的次数多了，浏览器就撂挑子报出了 ERR_TOO_MANY_REDIRECTS 的错误。</p></blockquote><p>解决的方法很简单，前往cloudflare官网，ssl/tls设置中吧ssl/tls加密模式改为FULL即可。</p><p><img src="https://cdn.jsdelivr.net/gh/haojie06/imgStorage/imgs/2020/03/0306.png" alt=""></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="6612533591"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.moeelf.com/archives/10.html">用Cloudflare CDN 如何自定义节点</a></li><li><a href="https://wzfou.com/cloudflare-ip/">CloudFlare免费CDN加速自定义节点-CloudFlare自选IP加快CDN速度</a></li><li><a href="https://www.wpzhiku.com/wordpress-wang-zhan-shi-yong-cloudflare-hou-ti-shi-jiang-nin-chong-ding-xiang-de-ci-shu-guo-duo-de-yuan-yin-ji-jie-jue-ban-fa/">WordPress 网站使用 CloudFlare 后提示“将您重定向的次数过多” 的原因及解决办法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站 </tag>
            
            <tag> 分享 </tag>
            
            <tag> cdn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo部署到coding page以及zeit.co</title>
      <link href="/posts/hexo-deploy-pages.html"/>
      <url>/posts/hexo-deploy-pages.html</url>
      
        <content type="html"><![CDATA[<h2 id="github-page-coding-zeit对比"><a href="#github-page-coding-zeit对比" class="headerlink" title="github page coding zeit对比"></a>github page coding zeit对比</h2><div class="tocStart"></div><!-- toc --><ul><li><a href="#把hexo生成的文件发布到coding">把hexo生成的文件发布到coding</a></li><li><a href="#部署静态网站">部署静态网站</a><ul><li><a href="#配置自定义域名">配置自定义域名</a></li><li><a href="#智能解析github-page-和-coding-page双部署需要设置">智能解析(github page 和 coding page双部署需要设置)</a></li></ul></li><li><a href="#效果测试">效果测试</a></li><li><a href="#总结">总结</a></li></ul><!-- tocstop --><div class="tocEnd"></div>之前把wordpress上的文章都迁移到了github page上，改为使用hexo生成的静态网站，但是发现百度爬虫无法爬取github page上的资源，所以考虑用coding做一个镜像站，采用双部署的方法来发布网站。<a id="more"></a><p>但是发现网上的绝大多数关于使用coding page(几乎所有)教程都是<strong>过时</strong>的，coding新建项目时把项目命名成xxx.coding.me之后访问显示404，找遍了网站都没找到<strong>生成page</strong>的选项。最后在一番折腾之后，在团队实名认证这里看到了<em>进行实名认证之后可以使用静态网站</em>的选项…终于找到了入口，实名就实名吧，填写名字身份证号以及手机号之后，马上就通过实名了。</p><h3 id="把hexo生成的文件发布到coding"><a href="#把hexo生成的文件发布到coding" class="headerlink" title="把hexo生成的文件发布到coding"></a>把hexo生成的文件发布到coding</h3><p>这一步参照网上的教程就可以了，在coding创建一个仓库(仓库名其实无所谓)，然后获得仓库的ssh/https链接，填到hexo的_config中，<code>hexo cl &amp;&amp; hexo d</code>部署上去就好(ssh记得添加公匙)</p><p>顺带一提，一台电脑有多个hexo仓库或者使用多个ssh密匙的情况可以查看这个博客来解决 <a href="https://www.sugen.cn/article-20190622.html">https://www.sugen.cn/article-20190622.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class="line"></span><br><span class="line">Host github-rsa.com</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~&#x2F;.ssh&#x2F;github_rsa</span><br></pre></td></tr></table></figure><h3 id="部署静态网站"><a href="#部署静态网站" class="headerlink" title="部署静态网站"></a>部署静态网站</h3><p>实名之后还是看不到“部署page”的选项的，还需要前往项目设置(左下角)-&gt;项目与成员-&gt;功能开关 打开<strong>构建与部署</strong>功能，之后原来的左侧菜单栏中就多了一个按钮，在这选择静态网站。</p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/03/1209.png"/><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/03/1226.png" alt=""></p><p>选择立即部署，即可生成静态网站。</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="6612533591"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h4 id="配置自定义域名"><a href="#配置自定义域名" class="headerlink" title="配置自定义域名"></a>配置自定义域名</h4><p>点击右上角的设置可以前往coding page设置界面，在这里添加你的域名，并开启强制https。</p><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/03/1229.png" alt=""></p><h4 id="智能解析-github-page-和-coding-page双部署需要设置"><a href="#智能解析-github-page-和-coding-page双部署需要设置" class="headerlink" title="智能解析(github page 和 coding page双部署需要设置)"></a>智能解析(github page 和 coding page双部署需要设置)</h4><p>由于我的hexo主要仓库还是在github上，并且我也不打算完全转移到coding上，所以我在两边都部署了静态网站，这就需要dns pod之类的智能dns根据访问者的线路来区分应该解析到哪台服务器上了。比如我让境内的访问者访问coding page，境外的访问者访问github page。 <strong>注意，如果首先设置成这样，再申请证书会失败，我是暂时先让境内境外的dns都解析到coding然后申请证书成功之后，再修改成下图这样</strong></p><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/03/1232.png" alt=""></p><h3 id="效果测试"><a href="#效果测试" class="headerlink" title="效果测试"></a>效果测试</h3><p>之后再去百度站长工具查看百度的机器人是否可以获得站点上的文件。</p><h5 id="直连github-page"><a href="#直连github-page" class="headerlink" title="直连github page"></a>直连github page</h5><p>由于之前的dns记录记录还没有完全更新，这里面的部分国内测试节点依旧访问了coding page(腾讯云)，但是大部分都是访问的github page</p><h6 id="ping-测试"><a href="#ping-测试" class="headerlink" title="ping 测试"></a>ping 测试</h6><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/03/0108.png" alt=""></p><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/03/0113.png" alt=""></p><h6 id="网站打开时间"><a href="#网站打开时间" class="headerlink" title="网站打开时间"></a>网站打开时间</h6><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/03/0127.png" alt=""></p><h5 id="境内走coding-page-境外走github-page"><a href="#境内走coding-page-境外走github-page" class="headerlink" title="境内走coding page 境外走github page"></a>境内走coding page 境外走github page</h5><h6 id="ping-测试-1"><a href="#ping-测试-1" class="headerlink" title="ping 测试"></a>ping 测试</h6><p>coding page的服务器位于新加坡腾讯云，让境内访问coding page的时候ping值有不错的改善…但是在晚上测试，虽然腾讯云新加坡电信去程cn2，延迟看上去也还行，但是实际丢包惊人都是百分之五十以上的丢包率。</p><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/03/0125.png" alt=""></p><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/03/0126.png" alt=""></p><h6 id="网站打开时间-1"><a href="#网站打开时间-1" class="headerlink" title="网站打开时间"></a>网站打开时间</h6><p>有一定的提升。</p><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/03/0129.png" alt=""></p><h5 id="另外补充一个zeit作为cdn的比较"><a href="#另外补充一个zeit作为cdn的比较" class="headerlink" title="另外补充一个zeit作为cdn的比较"></a>另外补充一个zeit作为cdn的比较</h5><p>在网上看见有人说zeit用来加速hexo博客效果不错，我也试了试。我们在注册zeit的时候会让我们和github的账号关联，并添加仓库的权限，zeit和coding不同的是它不需要我们再push上去，在一开始关联我们的github仓库之后，我们每次hexo d github仓库发生变动，zeit也会重新构建静态网页，这点比coding方便很多。</p><p>他们使用的是香港/台湾的谷歌云服务器，效果看上去还是可以的，但是免费账号每个月只有20G的流量，如果访问量较大的博客可能就不太适合了，如果要自定义域名并开启https我们需要把域名的nameserver改成他们的。</p><p>3.13补充<br>又看了看 zeit 是支持ANAME/CNAME接入的，添加域名后把域名指向他们提供的*.now.sh即可，这样就很方便了。</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="6612533591"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h5 id="ping测试"><a href="#ping测试" class="headerlink" title="ping测试"></a>ping测试</h5><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/03/0527.png" alt=""></p><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/03/0534.png" alt="17ce的测试"></p><p><a href="http://www.17ce.com/site/ping/20200313_e1246360650d11eab8bc2bbb7b33a12c:1.html">查看详细结果</a></p><h6 id="网站打开时间-2"><a href="#网站打开时间-2" class="headerlink" title="网站打开时间"></a>网站打开时间</h6><p>其实这样看上去效果还不如coding部署的页面，另外我测试了一下百度爬虫抓取，使用zeit的话是可以成功抓取的。</p><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/03/0530.png" alt=""></p><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/03/0531.png" alt="zeit的百度爬虫抓取测试"></p><h6 id="百度爬虫测试"><a href="#百度爬虫测试" class="headerlink" title="百度爬虫测试"></a>百度爬虫测试</h6><p><strong>特别注意！</strong>如果你采取的是下载html文件验证的话，需要把html文件放到source文件夹里面，还得编辑一下文件内容，加上如下字段来避免hexo的模板改写该文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: </span><br><span class="line">date: 2020-03-013 13:30:30</span><br><span class="line">layout: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><hr><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/03/0134.png" alt="">部署之后再验证，通过。</p><p>验证成功了，但是在之后的抓取诊断测试中试了很多次依旧是失败，仔细看报错，发现百度的爬虫访问的还是github的ip，依旧403… 截至发文，抓取测试依旧是异常的，不知道为什么dnspod中把境内/百度的连接都解析到了coding page上，但是还是没起作用，可能是还需要等一段时间生效吧。</p><p>3.13晚上更新，在我让默认流量都走coding page，境外流量都走github page后，百度爬虫终于成功抓取了页面，之前单独设置百度走coding page的时候一直失败，不知道是不是dnspod的解析出了点问题。</p><p>修改配置之后，再测(晚上九点)<br>我目前用的配置是: (欢迎交流你们的配置)</p><ul><li>电信——coding page</li><li>移动——coding page</li><li>联通——zeit的gcp</li><li>搜索引擎——coding</li><li>境外——github page</li></ul><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/image/2020/03/0925.png" alt="ping"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对比了三种方案，如果直接使用github page或者github page + cloudflare的话除了访问较慢，还有一个比较大的问题是百度爬虫无法爬取你的页面，自然文章都不会被百度收录。采用github page + coding page的方式，如果你能接受实名的话可以使用，但是coding的服务器也是在新加坡而不是国内，所以速度也不会有什么保证(不过我看电信去程是cn2，但是晚上丢包吓人)，这样做也可以被百度收录。而zeit的话部署非常方便，百度爬虫可以正常获取页面，速度也还算可以(使用前面两种方案时，移动的访问速度简直比蜗牛还慢，甚至干脆无法访问)，但是免费版每个月只有20G流量(不过对于访问量不大的个人博客已经够了)。</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="6612533591"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>code-server打造web代码编辑环境</title>
      <link href="/posts/code-server.html"/>
      <url>/posts/code-server.html</url>
      
        <content type="html"><![CDATA[<h2 id="随时随地-coding"><a href="#随时随地-coding" class="headerlink" title="随时随地 coding"></a>随时随地 coding</h2><p>近日，微软推出了<strong>visual studio online</strong>，相当于一个web-ide,与remote deployment开发方式不同的是web-ide的前端与后端都位于服务器上，相当于只要用浏览器打开就能编写代码了，不需要再下载vscode，也不需要配置环境（当然环境要在服务器上配置好）。<a id="more"></a>使用这种方式我们便可以随时随地的通过浏览器来coding，无论是用性能落后的pc还是平板甚至是手机…不过目前<strong>visual studio online</strong>没有推出自部署版本，我们只能使用Azure的服务器，这就很不好，因为付款很麻烦（价格也不低），而且Azure的服务器都位于国外，高延迟也会带来糟糕的体验，不过其实早在<strong>vs online</strong>推出之前就有第三方实现了我们想要的功能，它就是<a href="https://github.com/cdr/code-server/issues/1101">cdr/code-server</a>。</p><h3 id="使用docker的方式部署"><a href="#使用docker的方式部署" class="headerlink" title="使用docker的方式部署"></a>使用docker的方式部署</h3><p>官方有docker的image我就直接使用docker来部署了，一来方便，二来可以给他人使用且安全性较高。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先获取image</span></span><br><span class="line">docker pull codercom/code-server:v2</span><br><span class="line"><span class="comment">#启动容器 设置密码为password 且设置端口转发到外网的8088</span></span><br><span class="line">docker run -it -p 8088:8080 --env PASSWORD=password codercom/code-server:v2</span><br><span class="line"><span class="comment">#docker的其它的一些命令</span></span><br><span class="line">docker system df -v <span class="comment"># 查看镜像/容器等占用的空间等信息</span></span><br><span class="line">docker stats <span class="comment"># 查看当前运行的容器的实时状况</span></span><br><span class="line"><span class="comment"># 更多关于docker的介绍https://juejin.im/post/5b260ec26fb9a00e8e4b031a</span></span><br></pre></td></tr></table></figure><h3 id="使用code-server"><a href="#使用code-server" class="headerlink" title="使用code-server"></a>使用code-server</h3><p>访问ip:port,输入密码后即可看见我们熟悉的vscode界面了，chrome中按下f11全屏体验更佳</p><p><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/haojie/646881109090850.png" alt="image.png"></p><p>另外，从下向上拖可以看见terminal窗口，此处显示的就是一个linux bash终端了，我们可以在这里执行apt等命令，也可以在这里安装python等环境，容器和宿主机共用内核，不过无法使用宿主机中的程序所以像是java，python等程序到这里也得重新安装一遍。</p><p>另外，如果想要修改登陆密码，可以使用<code>systemctl stop docker</code>停止docker运行后编辑<em>/var/lib/docker/containers</em> 对应id文件夹中的config.v2.json文件中的ENV PASSWORD环境变量。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 折腾 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓使用metasploit</title>
      <link href="/posts/android-metasploit.html"/>
      <url>/posts/android-metasploit.html</url>
      
        <content type="html"><![CDATA[<h1 id="安卓使用metasploit-framework"><a href="#安卓使用metasploit-framework" class="headerlink" title="安卓使用metasploit-framework"></a>安卓使用metasploit-framework</h1><p>昨天碰到了一个服务器面板，管理员账户名已知，闲的没事干便想着猜测一下密码是什么，没想到居然是 “123456” 这样的极弱密码，猜了两次就猜出来了，一次成功之后手又有点痒了，不如在手机上装上nmap, metasploit-framework等工具，无聊的时候可以学习一下”网络安全”知识。</p><a id="more"></a><h2 id="Termux-安装metasploit"><a href="#Termux-安装metasploit" class="headerlink" title="Termux 安装metasploit"></a>Termux 安装metasploit</h2><p>当然在安卓系统中我们是没办法直接使用这些工具的，于是我是用了<strong>termux</strong>创建了一个linux的环境，详细配置可以查看<a href="https://www.sqlsec.com/2018/05/termux.html">Termux 高级终端安装使用配置教程</a>。按照教程可以直接安装nmap,sqlmap等工具，但毕竟是18年的教程了，一些软件包发生了变化，比如没办法直接使用文章中的方法安装metasploit框架了，根据termux wiki，当前版本的源中已经添加了metasploit，不过该软件位于<strong>unstable-repo</strong>源中，我们首先要执行<code>pkg install unstable-repo</code>添加该源，<strong>！！注意，清华源，科大源等国内termux源虽然下载速度很快，但是软件包不全/某些包版本过老，会导致安装失败，所以接下来的操作请使用默认的官方源</strong> </p><p>在添加了unstable-repo之后执行<code>apt update</code>，之后即可直接使用<code>apt install metasploit</code>安装 msf框架了，注意，由于该源在国外，安装极其缓慢，而且有时可能会因为网络状况不好而安装失败，我花了一个多小时才下载安装完毕，请耐心等待，一个网络不行尝试一下其它的网络。</p><p>以前在kali linux上安装好metasploit框架还需要进行配置数据库连接等操作，不过在termux中这些操作都可省了，使用包管理器安装好的msf框架已经是配置完毕的状态了，执行msfconsole即可进入。</p><h2 id="使用frp进行代理"><a href="#使用frp进行代理" class="headerlink" title="使用frp进行代理"></a>使用frp进行代理</h2><p>当我们尝试使用metasploit进行某些攻击的时候需要宿主机连接我们的手机，比如我们生成病毒的时候使用的<em>windows/meterpreter/reverse_tcp</em>载荷，但是我们的手机没有公网ip怎么远程控制宿主机呢？我们可以使用<a href="https://github.com/fatedier/frp">frp</a>来进行代理，至于怎么操作，该项目的readme已经说的很详细了。 <em>当然这是一个不太好的方法，被攻击者完全可以通过你使用的代理服务器的ip找出你的信息（当然你要是能隐藏好这些信息也行）</em>，另外我还遇到了一个问题就是frpc.ini配置文件中，host不能使用域名，原因是frp使用的go语言使用到的net模块是通过/etc/resolv.conf获得dns服务器地址的而android系统中没有/etc/resolv.conf文件，会导致域名无法解析，解决方法有很多，比较简单的就是直接填写ip即可，另外可以参考<a href="https://github.com/fatedier/frp/issues/700">#issue700</a> 。</p><h2 id="生成木马进行攻击"><a href="#生成木马进行攻击" class="headerlink" title="生成木马进行攻击"></a>生成木马进行攻击</h2><p>有空再补全…</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://www.sqlsec.com/2018/05/termux.html"> Termux 高级终端安装使用配置教程 </a></p><p><a href="https://kionf.com/2018/09/13/metasploit-presistence/">关于 meterpreter 持久化问题研究</a></p><p><a href="https://www.bodkin.ren/index.php/archives/431/">Metasploit 「控制持久化」权限维持</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 折腾 </tag>
            
            <tag> metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用bdl插件</title>
      <link href="/posts/bdl-plugins-guide.html"/>
      <url>/posts/bdl-plugins-guide.html</url>
      
        <content type="html"><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="6612533591"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="bdl插件使用"><a href="#bdl插件使用" class="headerlink" title="bdl插件使用"></a>bdl插件使用</h2><p><em>bdl项目地址 <a href="https://github.com/BDLDev/bdlauncher">https://github.com/BDLDev/bdlauncher</a> 本文中大部分内容来源于此</em><br>[adinserter block=”1”]</p><h3 id="GUI菜单"><a href="#GUI菜单" class="headerlink" title="GUI菜单"></a>GUI菜单</h3><p>输入<code>/c</code>即可打开菜单，在这里可以进行便捷操作。</p><h3 id="传送"><a href="#传送" class="headerlink" title="传送"></a>传送</h3><table><thead><tr><th>指令</th><th>功能</th></tr></thead><tbody><tr><td><code>/home add [名字]</code></td><td>添加一个家</td></tr><tr><td><code>/home del [名字]</code></td><td>删除一个家</td></tr><tr><td><code>/home ls</code></td><td>查看你所有的家</td></tr><tr><td><code>/home go [名字]</code></td><td>回家</td></tr><tr><td><code>/warp ls</code></td><td>查看所有warp点</td></tr><tr><td><code>/warp [名字]</code></td><td>传送到指定warp点</td></tr><tr><td><code>/warp add [名字]</code></td><td>添加点（需要OP）</td></tr><tr><td><code>/warp del [名字]</code></td><td>删除一个点（需要OP）</td></tr></tbody></table><blockquote><p>玩家ID可以模糊匹配，例如AbCde 可以只输入ab</p></blockquote><table><thead><tr><th>指令</th><th>功能</th></tr></thead><tbody><tr><td><code>/tpa f [玩家ID]</code></td><td>让玩家传送到你</td></tr><tr><td><code>/tpa t [玩家ID]</code></td><td>你到玩家</td></tr><tr><td><code>/tpa ac</code></td><td>同意</td></tr><tr><td><code>/tpa de</code></td><td>拒绝</td></tr><tr><td><code>/suicide</code></td><td>自杀</td></tr></tbody></table><p>新版本GUI指令:</p><table><thead><tr><th>指令</th><th>功能</th></tr></thead><tbody><tr><td><code>/home gui</code></td><td>GUI回家</td></tr><tr><td><code>/warp gui</code></td><td>GUI Warp</td></tr><tr><td><code>/tpa gui</code></td><td>GUI传送</td></tr></tbody></table><h3 id="经济"><a href="#经济" class="headerlink" title="经济"></a>经济</h3><p><em>服务器目前未采用经济系统，但是圈地依旧需要钱，直接问管理员要即可</em></p><table><thead><tr><th>指令</th><th>功能</th></tr></thead><tbody><tr><td><code>/money query</code></td><td>查钱</td></tr><tr><td><code>/money query [玩家名]</code></td><td>查询目标玩家的金钱</td></tr><tr><td><code>/money pay [玩家ID] [钱数]</code></td><td>玩家间转账(单次最大10000)</td></tr><tr><td><code>/money paygui</code></td><td>使用GUI来转账</td></tr><tr><td>#### OP命令</td><td></td></tr><tr><td>指令</td><td>功能</td></tr><tr><td>-</td><td>-</td></tr><tr><td><code>/money set [玩家ID] [钱数]</code></td><td>将玩家的金钱设置为指定值</td></tr><tr><td><code>/money add [玩家ID] [钱数]</code></td><td>为玩家增加一些金钱</td></tr><tr><td><code>/money rd [玩家ID] [钱数]</code></td><td>扣钱，如果扣钱成功，会触发success，可以做链式命令方块或者cmdchain内cond使用</td></tr><tr><td><code>/reload_money</code></td><td>重载配置</td></tr></tbody></table><h3 id="领地命令"><a href="#领地命令" class="headerlink" title="领地命令"></a>领地命令</h3><table><thead><tr><th>指令</th><th>功能</th></tr></thead><tbody><tr><td><code>/reload_land</code></td><td>重载配置</td></tr><tr><td><code>/land a</code></td><td>进入起点模式,点地选点</td></tr><tr><td><code>/land b</code></td><td>进入终点模式，点地选点</td></tr><tr><td><code>/land exit</code></td><td>退出选点模式</td></tr><tr><td><code>/land buy</code></td><td>选点之后买地</td></tr><tr><td><code>/land trust [玩家ID]</code></td><td>添加主人</td></tr><tr><td><code>/land trustgui</code></td><td>GUI添加主人</td></tr><tr><td><code>/land untrust [玩家ID]</code></td><td>删除主人</td></tr><tr><td><code>/land untrustgui</code></td><td>删除主人GUI</td></tr><tr><td><code>/land sell</code></td><td>卖地（op可以强行卖）</td></tr><tr><td><code>/land query</code></td><td>查看当前领地主人</td></tr><tr><td><code>/land give [玩家ID]</code></td><td>转让权限<br>注意，只有land的第一个owner拥有trust,untrust,sell,perm的权限，trust后的主人只有领地的其他权限。<br>可以通过land give 转让全部权限给别人</td></tr><tr><td><code>/land perm 数字</code></td><td>指定领地具体权限</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    PERM_USE&#x3D;2,  使用方块权限</span><br><span class="line">    PERM_ATK&#x3D;4,  攻击权限</span><br><span class="line">    PERM_BUILD&#x3D;8,  建造破坏权限</span><br><span class="line">    PERM_POPITEM&#x3D;16,  物品展示框权限</span><br><span class="line">    PERM_INTERWITHACTOR&#x3D;32  盔甲架等交互权限</span><br><span class="line">权限数字为可以使用的权限之和</span><br><span class="line">例如 2&#x3D;可以睡觉，开箱子</span><br><span class="line">6&#x3D;可以睡觉，开箱子，攻击生物</span><br></pre></td></tr></table></figure><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="6612533591"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Minecraft </tag>
            
            <tag> Minecraft服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Minecraft基岩版服务器(bds)怎么添加行为包材质包</title>
      <link href="/posts/bds-packs-add.html"/>
      <url>/posts/bds-packs-add.html</url>
      
        <content type="html"><![CDATA[<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="6612533591"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="BDS添加行为包与材质包"><a href="#BDS添加行为包与材质包" class="headerlink" title="BDS添加行为包与材质包"></a>BDS添加行为包与材质包</h2><p>Minecraft Bedrock Dedicated Server不同于其它的第三方服务端，它是支持添加材质包行为包的(虽然截止1.13添加新方块的行为包依旧无法生效)，尽管<em>bedrock_server_how_to.html</em>里面说了目前还没有办法<strong>直接</strong>启用行为包/材质包，但是我们依旧是有办法添加包到服务器上并启用的，添加行为包和材质包的方法相似，这里以添加行为包为例。</p><p>首先在存档文件夹（以我的存档文件夹路径为例，level-name为fine时路径为 <em>/home/minecraft/bds/worlds/fine</em> ）中新建两个json文件，<strong>world_behavior_packs.json</strong> 与 <strong>world_resource_packs.json</strong>，然后将我们要添加的包（文件夹形式，后缀.mcpack其实就是.zip文件，修改后缀为.zip解压到文件夹中即可）移动到bds下的 <strong>behavior_packs/</strong> 文件夹中，之后查看行为包中的 <strong>manifest.json</strong>，json结构如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"format_version"</span> : <span class="number">1</span>,</span><br><span class="line">   <span class="attr">"header"</span> : &#123;</span><br><span class="line">      <span class="attr">"description"</span> : <span class="string">"超凶猫的行为包,很凶的！"</span>,</span><br><span class="line">      <span class="attr">"name"</span> : <span class="string">"超凶猫的行为包"</span>,</span><br><span class="line">      <span class="attr">"platform_locked"</span> : <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"uuid"</span> : <span class="string">"460363a2-c458-4da5-84a9-56dc6dc88a6d"</span>,</span><br><span class="line">          <span class="attr">"min_engine_version"</span> : [ <span class="number">1</span>, <span class="number">12</span>, <span class="number">0</span> ],</span><br><span class="line">      <span class="attr">"version"</span> : [ <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span> ]</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"modules"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">"description"</span> : <span class="string">"超凶猫的行为包"</span>,</span><br><span class="line">         <span class="attr">"type"</span> : <span class="string">"data"</span>,</span><br><span class="line">         <span class="attr">"uuid"</span> : <span class="string">"fbcaf43a-646c-48ae-aa00-3f1c3db019bc"</span>,</span><br><span class="line">         <span class="attr">"version"</span> : [ <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span> ]</span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   <span class="attr">"dependencies"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"uuid"</span>: <span class="string">"9c091fc5-12e2-4121-b5bd-8868ce45a45e"</span>,</span><br><span class="line">            <span class="attr">"version"</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">        <span class="attr">"capabilities"</span>: [ <span class="string">"experimental_custom_ui"</span>, <span class="string">"chemistry"</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面信息有很多，但是我们只需要复制出header中的uuid与version即可，编辑刚才在存档文件夹中新建的<strong>world_behavior_packs.json</strong>格式如下（以多个行为包为例子，注意<strong>uuid要改成pack_id</strong>）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">"pack_id"</span>: <span class="string">"460363a2-c458-4da5-84a9-56dc6dc88a6d"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>]</span><br><span class="line">     &#125;,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"pack_id"</span>: <span class="string">"018718bc-ed21-42be-841d-839bc7eb1ca1"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>格式必须符合JSON的标准，如果出错，行为包是不会加载的，材质包同上。</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="6612533591"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Minecraft </tag>
            
            <tag> Minecraft服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker图片中文显示乱码/显示方块解决方法</title>
      <link href="/posts/docker-chinese-support.html"/>
      <url>/posts/docker-chinese-support.html</url>
      
        <content type="html"><![CDATA[<h2 id="docker-smokeping中文无法正常显示"><a href="#docker-smokeping中文无法正常显示" class="headerlink" title="docker smokeping中文无法正常显示"></a>docker smokeping中文无法正常显示</h2><p>在通过docker配置好了smokeping之后，我遇到了一个问题，当涉及到需要docker中的程序生成图片并提供访问的时候，图片中的中文都无法正常显示，而是显示成了一个个方块，今天查阅了相关资料，解决了这个问题。</p><a id="more"></a><h3 id="docker安装中文字体"><a href="#docker安装中文字体" class="headerlink" title="docker安装中文字体"></a>docker安装中文字体</h3><p>图片中的中文显示为乱码大概率是因为docker容器中缺少中文字体，只要我们把字体装上就好了。以alpine系统为例(现在很多docker开始使用alpine作为系统，因为他足够轻量占用的资源也少)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo @edge http:&#x2F;&#x2F;nl.alpinelinux.org&#x2F;alpine&#x2F;edge&#x2F;testing &gt;&gt; &#x2F;etc&#x2F;apk&#x2F;repositories &amp;&amp; apk add wqy-zenhei@edge</span><br><span class="line">apk add wqy-zenhei --update-cache --repository http:&#x2F;&#x2F;nl.alpinelinux.org&#x2F;alpine&#x2F;edge&#x2F;testing --allow-untrusted</span><br></pre></td></tr></table></figure><p>之后刷新网页，发现中文已经可以正常显示了。</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="6612533591"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> bugs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Babylon.js在网页上显示glb模型</title>
      <link href="/posts/babylon-glb.html"/>
      <url>/posts/babylon-glb.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用Babylon-js在网页上显示glb模型"><a href="#使用Babylon-js在网页上显示glb模型" class="headerlink" title="使用Babylon.js在网页上显示glb模型"></a>使用Babylon.js在网页上显示glb模型</h1><p>Minecraft的结构方块可以导出格式为 <strong>.glb</strong> 的模型文件，今天突发奇想，“能不能把这些模型放到网页上展示呢?”经过一番搜索，最终使用 <strong>Babylon.js Viewer</strong> 实现了这个功能。</p><h2 id="模型文件"><a href="#模型文件" class="headerlink" title="模型文件"></a>模型文件</h2><p>关于各种模型文件格式的介绍可以查看下面两个网页:</p><ul><li><a href="https://www.bgteach.com/article/132">三维文件格式知多少 | abc、glTF、fbx、obj、dae、stl、3ds…</a></li><li><a href="https://yivian.com/news/51717.html">什么是3D模型，什么是GLTF，又如何使用GLTF文件</a><a id="more"></a> 关于glb格式的介绍<blockquote><p>GLTF文件实际上不是单个文件。相反，它们是包含JSON文档的文件夹，然后还有一些图片，以及其他包含几何图形，纹理，凹凸贴图等的文件夹。其他文件夹都是通过一个相对URLS进行引用，因此你一般可以将文件夹转储到Web服务器上，直接引用GLTF文件，其余资源将正确加载。</p><p>但如果你使用的是CDN而非自己的Web服务器，则可能无法控制相对URL，而且它们会出现问题。相反，你可以将GLTF转换为名为GLB的二进制格式，一个包含所有资源的单个文件。然后，这个单个文件可以放在你的CDN上并直接引用。</p><p>要获取GLB文件，你可以直接从3D建模程序中导出它们，也可以使用工具将GLTF转换为GLB。你可以使用这个非常好的基于网络的转换器：MakeGLB。只需将包含GLTF文件的文件夹拖到页面，然后它就会生成并下载GLB文件。接下来将GLB文件上传到Glitch项目的Assets部分。然后选择asset的URL并在主文档中予以引用。</p></blockquote></li></ul><h2 id="Babylon-js"><a href="#Babylon-js" class="headerlink" title="Babylon.js"></a>Babylon.js</h2><p><a href="https://www.babylonjs.com.cn/">Babylon.js</a>是一个基于webgl的3d图形引擎，利用他我们可以在网页上渲染出3D图形，而Babylon.js可以让我们很简单的在网页上展示我们的模型，支持glb格式。参考Babylon.js viewer的<a href="https://doc.babylonjs.com/extensions/the_babylon_viewer#cdn">文档</a>，我们可以在网页上使用下面这种方式插入一个viewer来展示模型。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Babylon.js Viewer - Display a 3D model<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://preview.babylonjs.com/viewer/babylon.viewer.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">babylon</span> <span class="attr">model</span>=<span class="string">"https://models.babylonjs.com/boombox.glb"</span> <span class="attr">templates.main.params.fill-screen</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">babylon</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果想在wordpress中使用，直接使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.babylonjs.com/viewer/babylon.viewer.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">babylon</span> <span class="attr">model</span>=<span class="string">"https://models.babylonjs.com/boombox.glb"</span> <span class="attr">templates.main.params.fill-screen</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">babylon</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于babylon.js的js文件都储存在国外的服务器且文件较大，所以有时候加载相当缓慢，可以考虑使用CDN或者把js文件下载到本地…另外我的glb模型文件放在阿里云oss上，这里还遇到了<strong>跨域</strong>的问题，这个另外开一篇文章了记录了。至于最终效果如何，可以查看下图:</p><script src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/model/babylon.viewer.js"></script><p><babylon model="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/model/ship2.glb" templates.main.params.fill-screen="true"></babylon></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序使用npm模块</title>
      <link href="/posts/wechatapp-npm.html"/>
      <url>/posts/wechatapp-npm.html</url>
      
        <content type="html"><![CDATA[<h1 id="小程序使用npm模块以及GB2312解码"><a href="#小程序使用npm模块以及GB2312解码" class="headerlink" title="小程序使用npm模块以及GB2312解码"></a>小程序使用npm模块以及GB2312解码</h1><h2 id="使用npm模块"><a href="#使用npm模块" class="headerlink" title="使用npm模块"></a>使用npm模块</h2><p>今天的一个项目中，小程序从服务器得到的数据是16进制数据包，形似<code>CE C2 B6 C8 3A 32 37 20 43 2C CA AA B6 C8 3A 34 38 20 25 20 0D 0A</code>,研究后发现这个数据包使用的是<strong>GB2312</strong>的编码，而javascript是没办法直接解码GB2312的，于是我们需要使用npm导入第三方包了，期间遇到了一些坑。</p><a id="more"></a><p>首先先在小程序的目录下执行了<code>npm init</code>，初始化了项目，然后执行<code>npm search gb2312</code>发现并使用了如下模块<code>fast-gbk                  | encode and decode…   | =song940        | 2019-06-17 | 0.0.1    | gbk</code>。使用<code>npm install --production fast-gbk</code>安装该模块，但是光做到这里还没办法在项目中使用该模块。我们还需要在微信开发者工具的设置-&gt;项目设置里勾选使用npm模块，之后还需要点击工具-&gt;构建npm。之后开发者工具会进行如下操作:</p><blockquote><p>首先 node_modules 目录不会参与编译、上传和打包中，所以小程序想要使用 npm 包必须走一遍“构建 npm”的过程，在最外层的 node_modules 的同级目录下会生成一个 miniprogram_npm 目录，里面会存放构建打包后的 npm 包，也就是小程序真正使用的 npm 包。<br>构建打包分为两种：小程序 npm 包会直接拷贝构建文件生成目录下的所有文件到 miniprogram_npm 中；其他 npm 包则会从入口 js 文件开始走一遍依赖分析和打包过程（类似 webpack）。<br>寻找 npm 包的过程和 npm 的实现类似，从依赖 npm 包的文件所在目录开始逐层往外找，直到找到可用的 npm 包或是小程序根目录为止。</p></blockquote><p>按理说在进行了上述操作之后应该已经可以导入并使用模块了,然而当我尝试使用<code>const { encode, decode } = require(&#39;fast-gbk&#39;);</code>的时候，出现报错<strong>module “miniprogram_npm/fast-gbk/codes.json”</strong>,原始的npm文件夹中应该有一个codes.json文件记录了编码，然而重新打包之后的文件夹中竟然漏了这个文件，看来<em>其他 npm 包则会从入口 js 文件开始走一遍依赖分析和打包过程（类似 webpack）</em>也不是完全的可靠啊。于是我把json文件中的所有内容直接复制到了打包后的程序入口index.js中，问题最终解决。</p><h2 id="GB2312十六进制解码"><a href="#GB2312十六进制解码" class="headerlink" title="GB2312十六进制解码"></a>GB2312十六进制解码</h2><p>fast-gbk的readme里的示例已经很清楚了，对于形似<code>CE C2 B6 C8 3A 32 37 20 43 2C CA AA B6 C8 3A 34 38 20 25 20 0D 0A</code>这样的数据包我的解码方式如下。（第三方包已经处理好了ASCII字符与全角字符的区别）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hexToString</span>(<span class="params">hexString</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> hexArr = hexString.toLowerCase().split(<span class="string">' '</span>);</span><br><span class="line"><span class="keyword">let</span> codeArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; hexArr.length; i++) &#123;</span><br><span class="line"><span class="keyword">let</span> fb = <span class="built_in">parseInt</span>(hexArr[i], <span class="number">16</span>);</span><br><span class="line">codeArr.push(fb);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(decode(codeArr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 微信小程序 </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wordpress使用自定义字体</title>
      <link href="/posts/wordpress-custom-font.html"/>
      <url>/posts/wordpress-custom-font.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用本地自定义字体"><a href="#使用本地自定义字体" class="headerlink" title="使用本地自定义字体"></a>使用本地自定义字体</h1><p>在wordpress上如果我们不满足于原版的字体我们可以引入更多的字体，这篇文章记录了我是如何为网站标题加上自定义字体的。</p><h2 id="获得字体包"><a href="#获得字体包" class="headerlink" title="获得字体包"></a>获得字体包</h2><p>提供字体的网站有很多，我的网站标题字体来自<a href="http://www.foundertype.com">方正字库</a>的<a href="http://www.foundertype.com/index.php/FontInfo/index/id/4594.html?utm_source=zhaozicn">郑明瑾秀丽笔行书</a>,下载字体时注意区分好字体的<strong>授权种类</strong>，比如我使用的字体授权为免费非商用，乱用字体小心律师函😋。</p><a id="more"></a><p>大部分字体包都包含成千上万个文字，比如我这个字体包下载下来一看有10MB，这么大的文件我们不应该直接放到网站上因为这回大大的拖慢访问速度，那么我们能不能只抽出字体包中的部分字体使用呢？</p><p>工具<a href="https://github.com/forJrking/FontZip">FontZip</a>可以满足我们的需求，我们可以使用该工具提取我们需要的文字，精简字体包。<br><a href="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/haojie/142a01019063610.png"><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/haojie/142a01019063610.png" alt="image.png"></a><br>选择好字体，输入我们需要提取的文字后点击Ok，在和源字体相同的目录下将会生成名为fontzipMin.ttf的ttf文件。</p><h2 id="上传字体包并使用"><a href="#上传字体包并使用" class="headerlink" title="上传字体包并使用"></a>上传字体包并使用</h2><p>在主题所在的目录下创建font文件夹并把精简后的字体包放进去(注意需要给与文件755权限)，之后使用wordpress的自定义主题中的<strong>额外css</strong>或者使用的主题自带的<strong>自定义CSS样式</strong>功能，把我们的字体给网站标题加上。<br><a href="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/haojie/6e4a21019064241.png"><img src="https://haojie-storage.oss-cn-shenzhen.aliyuncs.com/haojie/6e4a21019064241.png" alt=""></a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123; <span class="attribute">font-family</span>: hj; <span class="attribute">src</span>: <span class="built_in">url</span>(https://blog.notesail.com/wp-content/themes/Sakura/font/min-ZMJXLBXSJ.ttf); <span class="attribute">font-weight</span>: normal; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.site-name</span> &#123;<span class="attribute">font-family</span>: hj;<span class="attribute">font-size</span>: <span class="number">30px</span>;&#125;</span><br></pre></td></tr></table></figure><p>保存之后刷新网站，字体应该就生效了。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wordpress </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Minecraft Websocket 服务器</title>
      <link href="/posts/minecraft-websocket.html"/>
      <url>/posts/minecraft-websocket.html</url>
      
        <content type="html"><![CDATA[<h1>Minecraft websocket 服务器</h1><p>这两天学习了nodejs，于是想着做点什么来实践一下，正好对Minecraft 基岩版的websocket功能比较感兴趣，于是做了一个websocket服务器的demo，可以用来获得游戏内的信息以及执行命令。</p><a id="more"></a><h2>准备</h2><h3>在服务器上使用Websocket</h3><p>不少人已经在bds服务器上尝试过使用wsserver/connect命令了吧？但是这条命令不知道为什么是不能直接使用的，要想使用这条命令我们需要做以下准备。</p><ul><li><p>获得op权限</p><p>只有op可以执行这条命令</p></li><li><p>修改权限等级</p><p>修改服务器配置文件server.proterties，加入一行<code>op-permission-level = 4</code>，使op拥有与控制台同级的命令权限</p></li></ul><p>做完上述操作之后就可以使用/connect命令了，当然如果只是输入/connect，会提示<strong>Command version mismatch</strong>，这里我们暂时不管它。</p><h2>上代码</h2><p>我使用的使nodejs+typescript的方式创建了这个demo，只有3个文件。注释已经写的很清楚了，有问题就留下评论吧。</p><p>app.ts server.ts packet.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.ts 用于启动程序，端口可以在这里设置</span></span><br><span class="line"><span class="keyword">import</span> &#123;WSServer&#125; <span class="keyword">from</span> <span class="string">'./server'</span>;</span><br><span class="line"><span class="keyword">let</span> server = <span class="keyword">new</span> WSServer();</span><br><span class="line">server.listen(<span class="number">6800</span>);&lt;<span class="regexp">/code&gt;&lt;/</span>pre&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//server.ts 包含ws服务器类,用于创建server对象</span></span><br><span class="line"><span class="keyword">import</span> &#123; Packet,UnSubscribe,Subscribe,CommandPacket &#125; <span class="keyword">from</span> <span class="string">'./packet/packet'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Server &#125; <span class="keyword">from</span> <span class="string">'ws'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;EventEmitter&#125; <span class="keyword">from</span> <span class="string">'events'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Socket &#125; <span class="keyword">from</span> <span class="string">'net'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createInterface&#125; <span class="keyword">from</span> <span class="string">'readline'</span>;</span><br><span class="line"><span class="comment">//import &#123;v4&#125; from 'uuid';</span></span><br><span class="line"><span class="keyword">let</span> uuid4 = <span class="built_in">require</span>(<span class="string">'uuid/v4'</span>);</span><br><span class="line"><span class="comment">//创建一个负责输入输出的对象</span></span><br><span class="line"><span class="keyword">const</span> rl = createInterface(&#123;</span><br><span class="line">    input: process.stdin,</span><br><span class="line">    output: process.stdout</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">WSServer</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span></span>&#123;</span><br><span class="line">    <span class="comment">//strictPropertyInitialization:false</span></span><br><span class="line">    _socket:Server;</span><br><span class="line"></span><br><span class="line">    public listen(port:number):<span class="keyword">void</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> server:WSServer = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>._socket = <span class="keyword">new</span> Server(&#123;<span class="attr">port</span>:port&#125;);</span><br><span class="line">        <span class="comment">//当有客户端连接时回调</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"WS开始监听"</span> + port);</span><br><span class="line">        <span class="keyword">this</span>._socket.on(<span class="string">"connection"</span>,socket =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"客户端连接"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//发送subscribe包建立监听</span></span><br><span class="line">            registerSubscribe(socket,<span class="string">"PlayerMessage"</span>);</span><br><span class="line">            registerSubscribe(socket,<span class="string">"BlockPlaced"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//当socket收到信息时回调</span></span><br><span class="line">            socket.on(<span class="string">"message"</span>, message =&gt; &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"接收到客户端的信息"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">let</span> data = <span class="built_in">JSON</span>.parse(message <span class="keyword">as</span> string);</span><br><span class="line">                <span class="keyword">let</span> msgPurpose = data.header.messagePurpose;</span><br><span class="line">                <span class="keyword">if</span>(msgPurpose == <span class="string">"error"</span>)&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"出现错误:"</span>, data);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(msgPurpose == <span class="string">"event"</span>)&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(data.body.eventName);</span><br><span class="line">                    <span class="comment">//发送unsubscribe包，取消对该事件的监听，具体表现为服务端只能获得一次客户端的方块放置事件</span></span><br><span class="line">                    <span class="keyword">if</span> (data.body.eventName == <span class="string">"BlockPlaced"</span>)&#123;</span><br><span class="line">                        sendCommand(socket,&lt;code&gt;say 发送unsubscribe包解除对方块放置事件的监听&lt;<span class="regexp">/code&gt;);</span></span><br><span class="line"><span class="regexp">                        unRegisterSubscribe(socket,"BlockPlaced");</span></span><br><span class="line"><span class="regexp">                    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">                else if(msgPurpose == "commandResponse")&#123;</span></span><br><span class="line"><span class="regexp">                    console.log("命令返回：" + data.body.statusCode);</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            &#125;);</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/接收到控制台的发送信息事件</span></span><br><span class="line"><span class="regexp">            server.on("sendMsg",msg=&gt;&#123;</span></span><br><span class="line"><span class="regexp">                console.log("[sendMsg]:" + msg);</span></span><br><span class="line"><span class="regexp">                sendCommand(socket,&lt;code&gt;say $&#123;msg&#125;&lt;/</span>code&gt;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            socket.on(<span class="string">"error"</span>,err=&gt;&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"建立的socket出现错误"</span> + err.message);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            socket.on(<span class="string">"close"</span>, () =&gt; &#123;<span class="built_in">console</span>.log(<span class="string">"客户端断开连接"</span>)&#125;);</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>._socket.on(<span class="string">"error"</span>,error=&gt;&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="xml"><span class="tag">&lt;<span class="name">code</span>&gt;</span>出现错误$&#123;error&#125;<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//持续获得用户输入</span></span><br><span class="line">        rl.on(<span class="string">'line'</span>, (input) =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="xml"><span class="tag">&lt;<span class="name">code</span>&gt;</span>[consoleInput]：$&#123;input&#125;<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span>);</span><br><span class="line">            <span class="keyword">let</span> [cmd,content] = input.split(<span class="string">":"</span>);</span><br><span class="line">            <span class="keyword">if</span>(cmd == <span class="string">"send"</span>)&#123;</span><br><span class="line">                <span class="comment">//触发sendMsg事件</span></span><br><span class="line">                server.emit(<span class="string">"sendMsg"</span>,content);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cmd == <span class="string">"exit"</span>)&#123;</span><br><span class="line">                process.exit();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerSubscribe</span>(<span class="params">socket:any,eventName:string</span>):<span class="title">void</span></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> packet:Subscribe = <span class="keyword">new</span> Subscribe(eventName);</span><br><span class="line">    socket.send(<span class="built_in">JSON</span>.stringify(packet));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unRegisterSubscribe</span>(<span class="params">socket:any,eventName:string</span>):<span class="title">void</span></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> packet:UnSubscribe = <span class="keyword">new</span> UnSubscribe(eventName);</span><br><span class="line">    socket.send(<span class="built_in">JSON</span>.stringify(packet));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendCommand</span>(<span class="params">socket:any,command:string</span>):<span class="title">void</span></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> packet:CommandPacket = <span class="keyword">new</span> CommandPacket(command);</span><br><span class="line">    socket.send(<span class="built_in">JSON</span>.stringify(packet));</span><br><span class="line">&#125;&lt;<span class="regexp">/code&gt;&lt;/</span>pre&gt;</span><br><span class="line">&lt;pre&gt;<span class="xml"><span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">"language-javascript"</span>&gt;</span>//packet 这里是三种数据包的类</span></span><br><span class="line"><span class="xml">let uuid4 = require('uuid/v4');</span></span><br><span class="line"><span class="xml">//数据包</span></span><br><span class="line"><span class="xml">export abstract class Packet&#123;</span></span><br><span class="line"><span class="xml">    body:&#123;&#125;;</span></span><br><span class="line"><span class="xml">    header:&#123;&#125;;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">export class Subscribe extends Packet&#123;</span></span><br><span class="line"><span class="xml">    body:&#123;</span></span><br><span class="line"><span class="xml">        eventName: string;</span></span><br><span class="line"><span class="xml">    &#125;;</span></span><br><span class="line"><span class="xml">    header:&#123;</span></span><br><span class="line"><span class="xml">        requestId: string;</span></span><br><span class="line"><span class="xml">        messagePurpose: string;</span></span><br><span class="line"><span class="xml">        version: number;</span></span><br><span class="line"><span class="xml">        messageType: string;</span></span><br><span class="line"><span class="xml">    &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    constructor(eventName:string)&#123;</span></span><br><span class="line"><span class="xml">        super();</span></span><br><span class="line"><span class="xml">        this.body = &#123;</span></span><br><span class="line"><span class="xml">            eventName:eventName</span></span><br><span class="line"><span class="xml">        &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">        this.header = &#123;</span></span><br><span class="line"><span class="xml">            requestId: uuid4(),</span></span><br><span class="line"><span class="xml">            messagePurpose: "subscribe",</span></span><br><span class="line"><span class="xml">            version: 1,</span></span><br><span class="line"><span class="xml">            messageType: "commandRequest"</span></span><br><span class="line"><span class="xml">        &#125;;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">export class UnSubscribe extends Packet&#123;</span></span><br><span class="line"><span class="xml">    body:&#123;</span></span><br><span class="line"><span class="xml">        eventName: string;</span></span><br><span class="line"><span class="xml">    &#125;;</span></span><br><span class="line"><span class="xml">    header:&#123;</span></span><br><span class="line"><span class="xml">        requestId: string;</span></span><br><span class="line"><span class="xml">        messagePurpose: string;</span></span><br><span class="line"><span class="xml">        version: number;</span></span><br><span class="line"><span class="xml">        messageType: string;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    constructor(eventName:string,uuid = uuid4())&#123;</span></span><br><span class="line"><span class="xml">        super();</span></span><br><span class="line"></span><br><span class="line"><span class="xml">        this.body = &#123;</span></span><br><span class="line"><span class="xml">            eventName: eventName</span></span><br><span class="line"><span class="xml">        &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">        this.header = &#123;</span></span><br><span class="line"><span class="xml">            requestId: uuid,</span></span><br><span class="line"><span class="xml">            messagePurpose: "unsubscribe",</span></span><br><span class="line"><span class="xml">            version: 1,</span></span><br><span class="line"><span class="xml">            messageType: "commandRequest"</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">export class CommandPacket extends Packet&#123;</span></span><br><span class="line"><span class="xml">    body:&#123;&#125;;</span></span><br><span class="line"><span class="xml">    header:&#123;&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    constructor(cmd:string)&#123;</span></span><br><span class="line"><span class="xml">        super();</span></span><br><span class="line"><span class="xml">        this.body = &#123;</span></span><br><span class="line"><span class="xml">            origin: </span></span><br><span class="line"><span class="xml">            &#123;</span></span><br><span class="line"><span class="xml">                type: "player"</span></span><br><span class="line"><span class="xml">            &#125;,</span></span><br><span class="line"><span class="xml">            commandLine: cmd,</span></span><br><span class="line"><span class="xml">            version: 1</span></span><br><span class="line"><span class="xml">        &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">        this.header = &#123;</span></span><br><span class="line"><span class="xml">            requestId: uuid4(),</span></span><br><span class="line"><span class="xml">            messagePurpose: "commandRequest",</span></span><br><span class="line"><span class="xml">            version: 1,</span></span><br><span class="line"><span class="xml">            messageType: "commandRequest"</span></span><br><span class="line"><span class="xml">        &#125;;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><h2>运行程序</h2><p>如果想部署一个ws服务器试试看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/haojie06/BedrockWsServer.git</span><br><span class="line"><span class="built_in">cd</span> BedrockWsServer</span><br><span class="line">npm install</span><br><span class="line">node build/app.js</span><br></pre></td></tr></table></figure>#默认使用6800端口</code></pre><p>之后我们在游戏里即可使用 <code>/connect ip:6800</code> 连接ws服务器了，但是不知道为什么，我在自己的电脑(win10)上运行的ws服务器可以通过浏览器访问，但是无法在游戏中连接，在我将程序放到远程的服务器上才正常连接。</p><p>在这个demo中，我尝试发送/接收了<a href="https://minecraft-zh.gamepedia.com/教程/WebSocket">mc中文wiki ws教程</a>中提到的几种数据包</p><ul><li><p>subscribe</p><p>用于监听一个事件，当用户成功连接以后，我们依旧是无法获得用户相关的信息的，我们需要发送subscribe包表明我们对哪些数据"感兴趣"，之后客户端才会通过ws发送给我们。在demo中我发送了两个时间的subscribe包，分别是  "PlayerMessage" <em>表示用户发送信息</em> 与 "BlockPlaced" <em>表示用户放置方块</em>这两个事件，我没有取出更多信息，感兴趣的朋友可以查看返回的json，并取出详细信息。</p></li><li><p>unsubscribe</p><p>当我们对一个事件不再感兴趣之后，可以发送unsubscribe包解除对此事件的接收，在demo中，我在接收到了一个“BlockPlaced”事件之后即发送该事件的unsubscribe包，因此我们只会接收到一次BlockPlaced事件。</p></li><li><p>commandrequest</p><p>该数据包用于执行命令，在demo中，你只需要在程序运行的后台中输入 send:你想发送的信息 按下回车后，程序即会构建一个执行 say 你想发送的信息的命令的数据包并发送，还会获得该命令执行的结果。</p></li></ul><p>在后台输入exit退出程序。</p><h2>总结</h2><p>写这个小程序算是加深了一些我对nodejs的了解，Minecraft基岩版的websocket虽然看上去可以获得很多信息，但是在我看来，它的功能还是相当有限的，因为有几个巨大的限制</p><ul><li>只有op在客户端上才能执行，而不是bds服务端直接连接另一个websocket服务端</li><li>要想保持连接需要op持续在线</li></ul><p>因为这些限制，我暂时想不出什么有趣的应用方向(也许之后我会慢慢扩展这个项目)，不过github上依旧有几个比较成熟的基于Minecraft websocket的项目可以了解一下</p><ul><li><a href="https://github.com/mcpews/MyAgent">通过ws来生成一个agent并进行控制</a></li><li><a href="https://github.com/CAIMEOX/FastBuilder">大名鼎鼎的fastbuild，利用ws快速建造</a></li></ul><blockquote><p>参考链接</p><p><a href="https://minecraft-zh.gamepedia.com/教程/WebSocket">https://minecraft-zh.gamepedia.com/%E6%95%99%E7%A8%8B/WebSocket</a></p><p><a href="https://minecraft-zh.gamepedia.com/教程/WebSocket">https://minecraft-zh.gamepedia.com/%E6%95%99%E7%A8%8B/WebSocket</a></p><p><a href="https://github.com/eDroiid/BedrockWS">https://github.com/eDroiid/BedrockWS</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Minecraft </tag>
            
            <tag> 编程 </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macvlan模式容器与宿主机通信</title>
      <link href="/posts/macvlan-host.html"/>
      <url>/posts/macvlan-host.html</url>
      
        <content type="html"><![CDATA[<h2 id="如何让macvlan模式的容器与宿主机通信"><a href="#如何让macvlan模式的容器与宿主机通信" class="headerlink" title="如何让macvlan模式的容器与宿主机通信"></a>如何让macvlan模式的容器与宿主机通信</h2><p>前段时间使用到了docker的macvlan模式，这个模式通俗一点讲就是在一张物理网卡上虚拟出两个虚拟网卡，具有不同的MAC地址，可以让宿主机和docker同时接入网络并且使用不同的ip，此时docker可以直接和同一网络下的其他设备直接通信，相当的方便，但是这种模式有一个问题，宿主机和容器是没办法直接进行网络通信的，如宿主机ping容器的ip，尽管他们属于同一网段，但是也是ping不通的<a id="more"></a>，反过来也是。因为该模式在设计的时候，为了安全禁止了宿主机与容器的直接通信，不过解决的方法其实也很简单——宿主机虽然没办法直接和容器内的macvlan接口通信，但是只要在宿主机上再建立一个macvlan，然后修改路由，使数据经由该macvlan传输到容器内的macvlan即可，macvlan之间是可以互相通信的。</p><p>具体一些的教程可以查看<a href="https://blog.oddbit.com/post/2018-03-12-using-docker-macvlan-networks/">USING DOCKER MACVLAN NETWORKS</a></p><blockquote><p>With a container attached to a macvlan network, you will find that while it can contact other systems on your local network without a problem, the container will not be able to connect to your host (and your host will not be able to connect to your container). This is a limitation of macvlan interfaces: without special support from a network switch, your host is unable to send packets to its own macvlan interfaces.</p><p>Fortunately, there is a workaround for this problem: you can create another macvlan interface on your host, and use that to communicate with containers on the macvlan network.</p></blockquote><p>原文中针对的情形是将网络下的某一网段就分配给docker容器，使宿主机可以和这些容器互相通信，而我当前只需要使宿主机和一个容器可以通信即可，所以命令会有一些不同。</p><p>假设所在网络的网段为 192.168.0.0/24 容器通过macvlan获得的ip为 192.168.0.100 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下操作都在宿主机上运行，新增一个叫mynet(不要和容器的macvlan重名)的macvlan接口</span></span><br><span class="line">ip link add mynet link eth0 <span class="built_in">type</span> macvlan mode bridge</span><br><span class="line"><span class="comment"># 为该接口分配ip，并启用</span></span><br><span class="line">ip addr add 192.168.0.10 dev mynet</span><br><span class="line">ip link <span class="built_in">set</span> mynet up</span><br><span class="line"><span class="comment"># 修改路由，使宿主机到192.168.0.100的通信全部经由mynet进行</span></span><br><span class="line">ip route add 192.168.0.100 dev mynet</span><br></pre></td></tr></table></figure><p>完成这些配置后，再次在宿主机中使用<code>ping 192.168.0.100</code>可以发现已经可以和容器直接通信了。</p><p>还有一点需要注意的是，重启后自己创建的macvlan接口会消失，我的方法是把上述命令都写到了rc.local内。</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- 文章内广告 横向 haojie --><p><ins class="adsbygoogle"     style="display:block"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="4140658788"     data-ad-format="auto"     data-full-width-responsive="true"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> docker网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs学习记录</title>
      <link href="/posts/study-nodejs.html"/>
      <url>/posts/study-nodejs.html</url>
      
        <content type="html"><![CDATA[<h1 id="node学习实践"><a href="#node学习实践" class="headerlink" title="node学习实践"></a>node学习实践</h1><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>npm是node的包管理工具，我们可以使用npm来安装依赖，也可以将自己编写好的程序上传到npm库中供他人使用。</p><blockquote><p>参考链接 <a href="https://www.runoob.com/nodejs/nodejs-npm.html">https://www.runoob.com/nodejs/nodejs-npm.html</a></p></blockquote><h3 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h3><p>我们可以使用<code>npm install</code>来安装npm模块，此时安装路径为当前目录下的<strong>node_modules</strong>文件夹,如果带上了-g参数，将进行全局安装，安装到 /usr/local 或 node 的安装目录，此时在其它的项目中也可以使用该模块。</p><h3 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h3><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><ul><li>使用<code>npm uninstall</code>来卸载模块</li><li>使用<code>npm update</code>更新模块</li><li>使用<code>npm search</code>搜索模块<a id="more"></a><h2 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h2></li></ul><blockquote><p>TypeScript 是 JavaScript 的一个超集，支持 ECMAScript 6 标准。</p><p>TypeScript 由微软开发的自由和开源的编程语言。</p><p>TypeScript 设计目标是开发大型应用，它可以编译成纯 JavaScript，编译出来的 JavaScript 可以运行在任何浏览器上。</p><p>TypeScript 是一种给 JavaScript 添加特性的语言扩展。增加的功能包括：</p><ul><li>类型批注和编译时类型检查</li><li>类型推断</li><li>类型擦除</li><li>接口</li><li>枚举</li><li>Mixin</li><li>泛型编程</li><li>名字空间</li><li>元组</li><li>Await</li></ul><p>以下功能是从 ECMA 2015 反向移植而来：</p><ul><li>类</li><li>模块</li><li>lambda 函数的箭头语法</li><li>可选参数以及默认参数</li></ul></blockquote><p>TypeScript 可以通过类型注解提供编译时的静态类型检查，另外tsc可以将多个ts文件编译成一个js文件，于是我们可以将代码分散到多个文件中，条理更清晰，之后的学习实践都将使用Typescript来进行。</p><h3 id="Typescript环境配置"><a href="#Typescript环境配置" class="headerlink" title="Typescript环境配置"></a>Typescript环境配置</h3><p>我们首先要安装Typescript的环境，使用<code>npm install -g typescript</code>即可，成功安装之后我们便可使用<code>tsc</code>来进行Typescript相关的操作。比如编写hello.ts</p><pre><code>let say:string = &quot;hello world&quot;;console.log(say);`&lt;/pre&gt;使用`tsc hello.ts`将该文件编译为js文件，同一个目录下出现了名为hello.js的文件，使用`node hello.js`即可执行。### Typescript学习笔记关于Typescript的详细教程请查看[Typescript中文文档](https://www.tslang.cn/docs/home.html)以及[菜鸟教程Typescript](https://www.runoob.com/typescript/ts-basic-syntax.html)#### 面向对象ts是面向对象的语言&gt; *   **对象**：对象是类的一个实例，有状态和行为。</code></pre><blockquote><ul><li><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态。</li><li><strong>方法</strong>：方法是类的操作的实现步骤。</li></ul></blockquote><pre><code>以下操作创建了一个类以及实例化了它的一个对象,并调用了对象的一个方法&lt;pre&gt;`class Friend {    greet():void {       console.log(&quot;hello!&quot;)    } } var friend = new Friend(); friend.greet();`&lt;/pre&gt;编译成的js文件内容如下&lt;pre&gt;`var Friend = /** @class */ (function () {    function Friend() {    }    Friend.prototype.greet = function () {        console.log(&quot;hello!&quot;);    };    return Friend;}());var friend = new Friend();friend.greet();`&lt;/pre&gt;#### 基础类型Typescript声明一个变量的时候，可以规定该变量的类型，格式`let a: number = 1;`</code></pre><ul><li><p>any 此类型的变量可以赋予任何类型的值(编译时不会进行类型检查)</p><pre>`let arrayList: any[] = [1, false, 'fine']; //可以定义一个可以储存任何类型的数组`</pre></li><li><p>number: ts中没有整数类型以及浮点数类型，而都是使用number类型</p></li><li><p>string 字符串类型</p></li><li><p>boolean 布尔类型</p></li><li><p>数组类型<br>采用如下格式声明</p><pre>`// 在元素类型后面加上[]let arr: number[] = [1, 2];// 或者使用数组泛型let arr: Array<number> = [1, 2];`</pre></li><li><p>元组</p><pre>`let x: [string, number];x = ['Runoob', 1];    // 运行正常x = [1, 'Runoob'];    // 报错console.log(x[0]);    // 输出 Runoob`</pre></li><li><p><strong>枚举</strong></p><pre>`enum Color {Red, Green, Blue};let c: Color = Color.Blue;console.log(c);    // 输出 2`</pre></li><li><p>void 用于标识方法返回值 function hello(): void{}</p></li><li><p>null 表示对象缺失，null依旧是一个object(不同于undefined)</p></li><li><p>undefined 用于将变量初始化为一个未定义的值</p></li><li><p>never 是其它类型的子类型，代表永远不会出现的值</p><p><strong>可以使用”</strong>|<strong>“来表示一个变量可以是多种类型，如<code>let x: number | null | undefined;</code></strong></p><p>类型断言，可以使用<string>或者是value as string的方式来告诉编译器一个变量的类型。</p><blockquote><p>Null 和 Undefined 是其他任何类型（包括 void）的子类型，可以赋值给其它类型，如数字类型，此时，赋值后的类型会变成 null 或 undefined。而在TypeScript中启用严格的空校验（–strictNullChecks）特性，就可以使得null 和 undefined 只能被赋值给 void 或本身对应的类型</p></blockquote><h4 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h4><p>在较新的标准中加入了let和const两种变量声明方式</p></li><li><p>let<br>在ES6之前，我们都是用var来声明变量，而JS只有函数作用域和全局作用域，没有块级作用域，所以<code>{}</code>限定不了var声明变量的访问范围，新加入的let可以将变量的作用域限定在代码块中，并且无法在变量声明前使用该变量（如果使用var，该变量的声明会被提升到使用前），相同代码块中，同名变量不能多次声明，相对于var，let提升了安全性。</p></li><li><p>const<br>使用const修饰的变量拥有与let类似的作用域规则，除此之外它在被赋值后无法再次改变。</p><h5 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h5></li><li><p>数组解构</p><pre>`let input = [1, 2];let [first, second] = input;console.log(first); // outputs 1console.log(second); // outputs 2`</pre><pre>`// swap variables[first, second] = [second, first];`</pre><p>使用…来获得剩余的变量</p><pre>`let [first, ...rest] = [1, 2, 3, 4];console.log(first); // outputs 1console.log(rest); // outputs [ 2, 3, 4 ]`</pre></li><li><p>对象解构</p><pre>`let o = {  a: "foo",  b: 12,  c: "bar"};let { a, b } = o;`</pre><p>若使用…获得剩余变量，解构出来的也是一个对象。</p><pre>`//属性重命名 此处:不是用来指定类型let { a: newName1, b: newName2 } = o;`</pre></li><li><p>函数解构<br>知道有这么个东西就好…</p><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>注意，ts可以以下面这种方式直接创建一个对象(不需要使用类) <code>let myObj = { size: 10, label: &quot;Size 10 Object&quot; };</code>,接口中可以描述属性以及方法。</p><p>示例:</p><pre>`interface LabelledValue {  label: string;}function printLabel(labelledObj: LabelledValue) {  console.log(labelledObj.label);}let myObj = {size: 10, label: "Size 10 Object"};printLabel(myObj);`</pre></li><li><p>可选属性<br>接口里的属性可以不是必须的，在变量名后使用 <strong>?:</strong> 来指定接口中的可选属性</p></li><li><p>只读属性<br>在变量名之前加上<strong>readonly</strong>来指定只读属性，只读属性只能在对象创建的时候修改其值，另外可以使用<strong>ReadonlyArray<number></strong>创建只读数组，此类数组创建后不可修改值，无法赋值给普通数组(<em>可以使用类型断言 ra as number[] 来转换</em>)</p></li><li><p>额外属性检查<br>如果直接传递对象，对象可以带有接口不存在的字段，但是如果传递的是对象字面量如 <code>let mySquare = createSquare({ colour: &quot;red&quot;, width: 100 });</code>会报错，可以使用类型断言绕开检测，或者添加<strong>字符串索引签名</strong>，在接口中加入<code>[propName: string]: any;</code>,表示该接口还可以有任意数量的属性。</p></li><li><p>函数接口<br>指定参数类型以及返回值类型</p><pre>`interface SearchFunc {(source: string, subString: string): boolean;}`</pre></li><li><p>索引类型<br>索引可以是数字或者字符串，<strong>当使用数字索引的时候实际上ts是将数字转换为字符串之后再索引对象</strong>,因此数字索引时返回的对象必须是字符串索引返回对象的子类。</p><pre>`interface StringArray {}`</pre><pre>`interface ReadonlyStringArray {  readonly [index: number]: string;}let myArray: ReadonlyStringArray = ["Alice", "Bob"];myArray[2] = "Mallory"; // error!`</pre></li><li><p>接口继承<br>可使用extends进行继承，一个接口可以继承多个接口</p><pre>`interface Shape {  color: string;}interface PenStroke {  penWidth: number;}interface Square extends Shape, PenStroke {  sideLength: number;}let square = <Square>{};square.color = "blue";square.sideLength = 10;square.penWidth = 5.0;`</pre><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><p>示例</p><pre>`class Greeter {    greeting: string;    constructor(message: string) {        this.greeting = message;    }    greet() {        return "Hello, " + this.greeting;    }}let greeter = new Greeter("world");`</pre><p>类可以使用继承，另外注意派生类如果有构造函数constructor，需要调用super(),继承之后方法可以重写，另外也可以使用多态，父类引用子类对象，最终调用方法时使用的还是子类的方法。</p><h5 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h5><p>Typescript中的对象成员也有 public(默认，可不写)/private/protect 这几个访问修饰符，和java类似，private修饰的成员不能在类之外访问（子类也不行）而protect修饰的成员可以在子类中访问。</p><p>若一个类的构造函数被标记为protect，该类不能被实例化，但是可以被继承，子类可以实例化。</p><p>另外，可以使用<strong>readonly</strong>将成员属性设置为只读的，只读属性只能在声明时或者构造函数中赋值。</p><p>还可以使用参数属性，定义与赋值在同一个地方进行</p><blockquote><p>TypeScript使用的是结构性类型系统。 当我们比较两种不同的类型时，并不在乎它们从何处而来，如果所有成员的类型都是兼容的，我们就认为它们的类型是兼容的。</p><pre><code>然而，当我们比较带有 `private`或 `protected`成员的类型的时候，情况就不同了。 如果其中一个类型里包含一个 `private`成员，那么只有当另外一个类型中也存在这样一个 `private`成员， 并且它们都是**来自同一处声明**时，我们才认为这两个类型是兼容的。 对于 `protected`成员也使用这个规则。&lt;pre&gt;`class Animal {    private name: string;    constructor(theName: string) { this.name = theName; }}class Rhino extends Animal {    constructor() { super(&quot;Rhino&quot;); }}class Employee {    private name: string;    constructor(theName: string) { this.name = theName; }}let animal = new Animal(&quot;Goat&quot;);let rhino = new Rhino();let employee = new Employee(&quot;Bob&quot;);animal = rhino; //兼容，name来源相同animal = employee; // 错误: Animal 与 Employee 不兼容. 如果是public修饰的即认为兼容`&lt;/pre&gt;</code></pre></blockquote><h5 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h5><p>注意存取器需要编译目标版本大等于于ES5</p><p>ts的getter/setter和java不太一样，比如</p><pre>`    private _fullName: string;    get fullName(): string {        return this._fullName;    }//之后调用get方法是用object.fullname的方式来执行的。`</pre><h5 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h5><p>Typescript中也可以使用static修饰静态属性</p><h5 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h5><p>可以使用abstract修饰抽象类，是用abstract修饰抽象类中的抽象方法，抽象方法不包含方法体，由派生类实现。抽象类不可实例化，抽象类引用的子类对象不可调用子类特有的方法。</p><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><h5 id="有名字的函数以及匿名函数"><a href="#有名字的函数以及匿名函数" class="headerlink" title="有名字的函数以及匿名函数"></a>有名字的函数以及匿名函数</h5><pre>`function add(x: number, y: number): number {    return x + y;}let myAdd = function(x: number, y: number): number { return x + y; };`</pre><h5 id="可选参数以及默认参数"><a href="#可选参数以及默认参数" class="headerlink" title="可选参数以及默认参数"></a>可选参数以及默认参数</h5><p>默认情况下，参数的数量是必须满足函数的要求如果需要设置可选参数我们需要使用 <strong>?:</strong> 来指定一个可选参数，没有传递这个参数的时候，形参值为<strong>undefined</strong>,<strong>可选参数必须跟在必须参数的后面</strong></p><p><code>function buildName(firstName: string, lastName?: string)</code></p><p>除此之外，我们也可以设置参数的默认值，设置了默认值的参数如果用户没有传递有效值时，会使用默认值</p><p><code>function buildName(firstName: string, lastName = &quot;Smith&quot;)</code></p><h5 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h5><p>若我们无法预料会有多少个参数传入的时候可以使用剩余参数</p><p>剩余参数会被当做个数不限的可选参数。 可以一个都没有，同样也可以有任意个。 编译器创建参数数组，名字是你在省略号（ <code>...</code>）后面给定的名字，你可以在函数体内使用这个数组。</p><pre>`function buildName(firstName: string, ...restOfName: string[]) {  return firstName + " " + restOfName.join(" ");}`</pre><h5 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h5><p>参数类型不同，数量不同，类型的顺序不同</p><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><p><em>有时间时需要继续深入了解</em></p><pre>`function identity<T>(arg: T): T {    return arg;}`</pre><p>类型变量T记录了传入的变量的类型，返回的也是已知类型的变量而非any</p><p>使用时有下面两种方式 手动指定或者是用类型推论</p><pre>`let output = identity<string>("myString");  // type of output will be 'string'//某些复杂情况可能无法使用下面这种形式，需要手动指定类型let output = identity("myString");  // type of output will be 'string'`</pre><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><p>如果要在外部调用命名空间中的类/接口，需要加上export关键字</p><pre>`namespace SomeNameSpaceName {    export interface ISomeInterfaceName {      }     export class SomeClassName {      }  }`</pre><p>在外部调用</p><pre>`SomeNameSpaceName.SomeClassName;`</pre><p>如果命名空间在另一ts文件中，需要使用三斜杠语法</p><p><code>/// &lt;reference path = &quot;SomeFileName.ts&quot; /&gt;</code></p><h4 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h4><pre>`// 模块导出部分// 文件名 : SomeInterface.ts export interface SomeInterface {    // 代码部分}`</pre><pre>`// 需要使用模块时进行导入import someInterfaceRef = require("./SomeInterface");`</pre><blockquote><p>Typescript中还有许多的高级用法我还没有学习，在将来的学习中还需要返回来深入了解。</p></blockquote><h3 id="使用Typescript创建一个nodejs项目"><a href="#使用Typescript创建一个nodejs项目" class="headerlink" title="使用Typescript创建一个nodejs项目"></a>使用Typescript创建一个nodejs项目</h3><p>实际使用Typescript时，我们就不像上面那样直接使用tsc命令并带上一系列参数来编译ts文件，这是我们需要一个名为<strong>tsconfig.json</strong>的Typescript编译配置文件。</p><p>项目目录结构如下</p><p>├─build<br>├─node_modules<br>│  ├─.bin<br>│  ├─@types<br>│  │  └─node<br>│  │      └─ts3.2<br>│  ├─http<br>│  └─typescript<br>└─src</p><p>在项目根目录下执行 <code>tsc --init</code> 将会生成tsconfig.json文件，文件里面的配置项有很多，我们只修改其中的几项。</p><pre>`{  "compilerOptions": {    "target": "es6",                          /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. */    "module": "commonjs",                     /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */     "outDir": "./build",                        /* Redirect output structure to the directory. */     "rootDir": "./src",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */    "strict": true,                           /* Enable all strict type-checking options. */    "noImplicitAny": false,                 /* Raise error on expressions and */    "esModuleInterop": true                   /* Enables emit interoperability between */  }}`</pre><p>保存配置文件之后，我们只需要在项目根目录输入tsc，就可以将src文件夹中的ts文件编译，产生的js文件会储存在build文件夹中。</p><h4 id="使用-d-ts文件"><a href="#使用-d-ts文件" class="headerlink" title="使用.d.ts文件"></a>使用.d.ts文件</h4><p>我们在项目中常常需要用到内建模块或者第三方模块，但是在.ts文件中是没办法直接导入模块的。</p><p>我们可以在项目目录下执行<code>npm install --save-dev @types/node</code>获得node的类型说明文件，但是这个方法只能解决内建模块的说明文件问题，对于第三方模块</p></li><li><p><a href="http://microsoft.github.io/TypeSearch/">http://microsoft.github.io/TypeSearch/</a></p><p>我们可以修改package.json</p><pre>`    "scripts": {        "build": "tsc"    }</li></ul><p>之后我们只需要使用npm run build即可执行tsc命令（当然在将来的应用中我们往往不是只执行这一条简单的命令），比如可以加入<code>&quot;dev&quot;: &quot;supervisor -w build ./build/server.js&quot;</code>之后执行npm run dev来持续监控脚本，在js文件变化后重启服务器。</p><h2 id="node"><a href="#node" class="headerlink" title="node"></a>node</h2>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> 编程学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
